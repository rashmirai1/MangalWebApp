//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace MangalWeb.Model.Entity
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class MangalDBNewEntities : DbContext
    {
        public MangalDBNewEntities()
            : base("name=MangalDBNewEntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<tbl_CountryMaster> tbl_CountryMaster { get; set; }
        public virtual DbSet<tblDocumentMaster> tblDocumentMasters { get; set; }
        public virtual DbSet<tblZonemaster> tblZonemasters { get; set; }
        public virtual DbSet<tblCityMaster> tblCityMasters { get; set; }
        public virtual DbSet<Mst_PinCode> Mst_PinCode { get; set; }
        public virtual DbSet<Mst_DocumentType> Mst_DocumentType { get; set; }
        public virtual DbSet<Mst_ChildDeviation> Mst_ChildDeviation { get; set; }
        public virtual DbSet<Mst_ParentDeviation> Mst_ParentDeviation { get; set; }
        public virtual DbSet<Mst_PurityMaster> Mst_PurityMaster { get; set; }
        public virtual DbSet<Mst_Reason> Mst_Reason { get; set; }
        public virtual DbSet<Mst_SchemePurity> Mst_SchemePurity { get; set; }
        public virtual DbSet<tblaccountmaster> tblaccountmasters { get; set; }
        public virtual DbSet<tbl_GLChargeMaster_BasicInfo> tbl_GLChargeMaster_BasicInfo { get; set; }
        public virtual DbSet<tbl_GLChargeMaster_Details> tbl_GLChargeMaster_Details { get; set; }
        public virtual DbSet<tblFinancialyear> tblFinancialyears { get; set; }
        public virtual DbSet<tblCompanyBranchMaster> tblCompanyBranchMasters { get; set; }
        public virtual DbSet<Mst_PenaltySlab> Mst_PenaltySlab { get; set; }
        public virtual DbSet<Mst_SourceofApplication> Mst_SourceofApplication { get; set; }
        public virtual DbSet<Mst_AuditCategory> Mst_AuditCategory { get; set; }
        public virtual DbSet<Mst_AuditCheckList> Mst_AuditCheckList { get; set; }
        public virtual DbSet<Mst_Product> Mst_Product { get; set; }
        public virtual DbSet<Mst_ProductRate> Mst_ProductRate { get; set; }
        public virtual DbSet<Mst_ProductRateDetails> Mst_ProductRateDetails { get; set; }
        public virtual DbSet<tblItemMaster> tblItemMasters { get; set; }
        public virtual DbSet<TSchemeMaster_BasicDetails> TSchemeMaster_BasicDetails { get; set; }
        public virtual DbSet<tbl_UserCategory> tbl_UserCategory { get; set; }
        public virtual DbSet<Trn_DocumentUpload> Trn_DocumentUpload { get; set; }
        public virtual DbSet<Mst_BranchType> Mst_BranchType { get; set; }
        public virtual DbSet<User_Category_Hierarchy> User_Category_Hierarchy { get; set; }
        public virtual DbSet<tbl_KYCMobileOTP> tbl_KYCMobileOTP { get; set; }
        public virtual DbSet<Menu> Menus { get; set; }
        public virtual DbSet<UserAuthorization> UserAuthorizations { get; set; }
        public virtual DbSet<Trn_DocUploadDetails> Trn_DocUploadDetails { get; set; }
        public virtual DbSet<Trn_RequestForm> Trn_RequestForm { get; set; }
        public virtual DbSet<UserDetail> UserDetails { get; set; }
        public virtual DbSet<tblStateMaster> tblStateMasters { get; set; }
        public virtual DbSet<TSchemeMaster_EffectiveROI> TSchemeMaster_EffectiveROI { get; set; }
        public virtual DbSet<tbl_CKycState> tbl_CKycState { get; set; }
        public virtual DbSet<FLedgerMaster> FLedgerMasters { get; set; }
        public virtual DbSet<TBankCash_ReceiptDetails> TBankCash_ReceiptDetails { get; set; }
        public virtual DbSet<Imagestore> Imagestores { get; set; }
        public virtual DbSet<TGLSanctionDisburse_GoldItemDetails> TGLSanctionDisburse_GoldItemDetails { get; set; }
        public virtual DbSet<FSystemGeneratedEntryMaster> FSystemGeneratedEntryMasters { get; set; }
        public virtual DbSet<TGLSanctionDisburse_BasicDetails> TGLSanctionDisburse_BasicDetails { get; set; }
        public virtual DbSet<TGLSanctionDisburse_ChargesDetails> TGLSanctionDisburse_ChargesDetails { get; set; }
        public virtual DbSet<tblGroupmaster> tblGroupmasters { get; set; }
        public virtual DbSet<Mst_GstMaster> Mst_GstMaster { get; set; }
        public virtual DbSet<TGLSanctionDisburse_ChargesPostingDetails> TGLSanctionDisburse_ChargesPostingDetails { get; set; }
        public virtual DbSet<tblPrimaryGroup> tblPrimaryGroups { get; set; }
        public virtual DbSet<FCompanyYearEndClosing> FCompanyYearEndClosings { get; set; }
        public virtual DbSet<tblStandardEndTime> tblStandardEndTimes { get; set; }
        public virtual DbSet<TBankCash_PaymentDetails> TBankCash_PaymentDetails { get; set; }
        public virtual DbSet<TGLCashInOutDetail> TGLCashInOutDetails { get; set; }
        public virtual DbSet<TGLGoldInOutDetail> TGLGoldInOutDetails { get; set; }
        public virtual DbSet<TGLGoldStock> TGLGoldStocks { get; set; }
        public virtual DbSet<TGLInterest_Details> TGLInterest_Details { get; set; }
        public virtual DbSet<TGlReceipt_BasicDetails> TGlReceipt_BasicDetails { get; set; }
        public virtual DbSet<tbl_PreSanctionDetails> tbl_PreSanctionDetails { get; set; }
        public virtual DbSet<tbl_ResidenceVerification> tbl_ResidenceVerification { get; set; }
        public virtual DbSet<Trans_KYCAddresses> Trans_KYCAddresses { get; set; }
        public virtual DbSet<tblHistory_KYCAddresses> tblHistory_KYCAddresses { get; set; }
        public virtual DbSet<TGLKYC_BasicDetails> TGLKYC_BasicDetails { get; set; }
        public virtual DbSet<tblKYC_HistoryDetails> tblKYC_HistoryDetails { get; set; }
        public virtual DbSet<tbl_OrnamentEvaluation> tbl_OrnamentEvaluation { get; set; }
        public virtual DbSet<tbl_OrnamentEvaluationDetails> tbl_OrnamentEvaluationDetails { get; set; }
        public virtual DbSet<tbl_ValuatorOne> tbl_ValuatorOne { get; set; }
        public virtual DbSet<tbl_ValuatorOneDetails> tbl_ValuatorOneDetails { get; set; }
        public virtual DbSet<tbl_ValuatorTwo> tbl_ValuatorTwo { get; set; }
        public virtual DbSet<tbl_ValuatorTwoDetails> tbl_ValuatorTwoDetails { get; set; }
    
        [DbFunction("MangalDBNewEntities", "SplitValue")]
        public virtual IQueryable<SplitValue_Result> SplitValue(string @string, string delimiter)
        {
            var stringParameter = @string != null ?
                new ObjectParameter("String", @string) :
                new ObjectParameter("String", typeof(string));
    
            var delimiterParameter = delimiter != null ?
                new ObjectParameter("Delimiter", delimiter) :
                new ObjectParameter("Delimiter", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<SplitValue_Result>("[MangalDBNewEntities].[SplitValue](@String, @Delimiter)", stringParameter, delimiterParameter);
        }
    
        [DbFunction("MangalDBNewEntities", "SplitWords")]
        public virtual IQueryable<SplitWords_Result> SplitWords(string text)
        {
            var textParameter = text != null ?
                new ObjectParameter("text", text) :
                new ObjectParameter("text", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<SplitWords_Result>("[MangalDBNewEntities].[SplitWords](@text)", textParameter);
        }
    
        public virtual int generateFinancialYear(Nullable<int> financialYearId, ObjectParameter message)
        {
            var financialYearIdParameter = financialYearId.HasValue ?
                new ObjectParameter("FinancialYearId", financialYearId) :
                new ObjectParameter("FinancialYearId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("generateFinancialYear", financialYearIdParameter, message);
        }
    
        public virtual ObjectResult<GetKYCDetailsForDocument_Result> GetKYCDetailsForDocument(Nullable<int> branchId, Nullable<int> fyId)
        {
            var branchIdParameter = branchId.HasValue ?
                new ObjectParameter("BranchId", branchId) :
                new ObjectParameter("BranchId", typeof(int));
    
            var fyIdParameter = fyId.HasValue ?
                new ObjectParameter("FyId", fyId) :
                new ObjectParameter("FyId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetKYCDetailsForDocument_Result>("GetKYCDetailsForDocument", branchIdParameter, fyIdParameter);
        }
    
        public virtual ObjectResult<GetKYCDetailsForDocumentById_Result> GetKYCDetailsForDocumentById(Nullable<int> id)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetKYCDetailsForDocumentById_Result>("GetKYCDetailsForDocumentById", idParameter);
        }
    
        public virtual ObjectResult<GetDocumentUpload_Result> GetDocumentUpload(Nullable<int> branchId, Nullable<int> fYID)
        {
            var branchIdParameter = branchId.HasValue ?
                new ObjectParameter("BranchId", branchId) :
                new ObjectParameter("BranchId", typeof(int));
    
            var fYIDParameter = fYID.HasValue ?
                new ObjectParameter("FYID", fYID) :
                new ObjectParameter("FYID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetDocumentUpload_Result>("GetDocumentUpload", branchIdParameter, fYIDParameter);
        }
    
        [DbFunction("MangalDBNewEntities", "SplitValue1")]
        public virtual IQueryable<string> SplitValue1(string @string, string delimiter)
        {
            var stringParameter = @string != null ?
                new ObjectParameter("String", @string) :
                new ObjectParameter("String", typeof(string));
    
            var delimiterParameter = delimiter != null ?
                new ObjectParameter("Delimiter", delimiter) :
                new ObjectParameter("Delimiter", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<string>("[MangalDBNewEntities].[SplitValue1](@String, @Delimiter)", stringParameter, delimiterParameter);
        }
    
        public virtual ObjectResult<GetDocumentUploadById_Result> GetDocumentUploadById(Nullable<int> id, Nullable<int> branchId, Nullable<int> fYID)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(int));
    
            var branchIdParameter = branchId.HasValue ?
                new ObjectParameter("BranchId", branchId) :
                new ObjectParameter("BranchId", typeof(int));
    
            var fYIDParameter = fYID.HasValue ?
                new ObjectParameter("FYID", fYID) :
                new ObjectParameter("FYID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetDocumentUploadById_Result>("GetDocumentUploadById", idParameter, branchIdParameter, fYIDParameter);
        }
    
        public virtual ObjectResult<T_GetFormDetails_FormIdWise_Result> T_GetFormDetails_FormIdWise(Nullable<int> formId, Nullable<int> userId)
        {
            var formIdParameter = formId.HasValue ?
                new ObjectParameter("FormId", formId) :
                new ObjectParameter("FormId", typeof(int));
    
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<T_GetFormDetails_FormIdWise_Result>("T_GetFormDetails_FormIdWise", formIdParameter, userIdParameter);
        }
    
        public virtual ObjectResult<T_UserAuthorization_Forms_Result> T_UserAuthorization_Forms(Nullable<int> parentID, Nullable<int> userID, Nullable<int> userCategoryID, Nullable<int> brachId)
        {
            var parentIDParameter = parentID.HasValue ?
                new ObjectParameter("ParentID", parentID) :
                new ObjectParameter("ParentID", typeof(int));
    
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            var userCategoryIDParameter = userCategoryID.HasValue ?
                new ObjectParameter("UserCategoryID", userCategoryID) :
                new ObjectParameter("UserCategoryID", typeof(int));
    
            var brachIdParameter = brachId.HasValue ?
                new ObjectParameter("BrachId", brachId) :
                new ObjectParameter("BrachId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<T_UserAuthorization_Forms_Result>("T_UserAuthorization_Forms", parentIDParameter, userIDParameter, userCategoryIDParameter, brachIdParameter);
        }
    
        public virtual int T_Update_UserAuthorization_DetailsUserWise(Nullable<int> index, Nullable<int> userID, Nullable<int> parentID, Nullable<int> formID, Nullable<bool> isVisible, Nullable<bool> isEdit, Nullable<bool> isView, Nullable<bool> isSave, Nullable<bool> isDelete)
        {
            var indexParameter = index.HasValue ?
                new ObjectParameter("index", index) :
                new ObjectParameter("index", typeof(int));
    
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            var parentIDParameter = parentID.HasValue ?
                new ObjectParameter("ParentID", parentID) :
                new ObjectParameter("ParentID", typeof(int));
    
            var formIDParameter = formID.HasValue ?
                new ObjectParameter("FormID", formID) :
                new ObjectParameter("FormID", typeof(int));
    
            var isVisibleParameter = isVisible.HasValue ?
                new ObjectParameter("isVisible", isVisible) :
                new ObjectParameter("isVisible", typeof(bool));
    
            var isEditParameter = isEdit.HasValue ?
                new ObjectParameter("isEdit", isEdit) :
                new ObjectParameter("isEdit", typeof(bool));
    
            var isViewParameter = isView.HasValue ?
                new ObjectParameter("isView", isView) :
                new ObjectParameter("isView", typeof(bool));
    
            var isSaveParameter = isSave.HasValue ?
                new ObjectParameter("isSave", isSave) :
                new ObjectParameter("isSave", typeof(bool));
    
            var isDeleteParameter = isDelete.HasValue ?
                new ObjectParameter("isDelete", isDelete) :
                new ObjectParameter("isDelete", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("T_Update_UserAuthorization_DetailsUserWise", indexParameter, userIDParameter, parentIDParameter, formIDParameter, isVisibleParameter, isEditParameter, isViewParameter, isSaveParameter, isDeleteParameter);
        }
    
        public virtual int T_Forms_UserAuthorization_ParentPage(Nullable<int> userId)
        {
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("T_Forms_UserAuthorization_ParentPage", userIdParameter);
        }
    
        public virtual ObjectResult<T_GetAuthorizeSubPagesList_PrentidWise_Result> T_GetAuthorizeSubPagesList_PrentidWise(Nullable<int> userID, Nullable<int> parentID, Nullable<int> branchId)
        {
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            var parentIDParameter = parentID.HasValue ?
                new ObjectParameter("ParentID", parentID) :
                new ObjectParameter("ParentID", typeof(int));
    
            var branchIdParameter = branchId.HasValue ?
                new ObjectParameter("BranchId", branchId) :
                new ObjectParameter("BranchId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<T_GetAuthorizeSubPagesList_PrentidWise_Result>("T_GetAuthorizeSubPagesList_PrentidWise", userIDParameter, parentIDParameter, branchIdParameter);
        }
    
        public virtual ObjectResult<GetKYCDetailsForRequestForm_Result> GetKYCDetailsForRequestForm(Nullable<int> kycId)
        {
            var kycIdParameter = kycId.HasValue ?
                new ObjectParameter("KycId", kycId) :
                new ObjectParameter("KycId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetKYCDetailsForRequestForm_Result>("GetKYCDetailsForRequestForm", kycIdParameter);
        }
    
        public virtual ObjectResult<GetCustomerRecordinSanction_Result> GetCustomerRecordinSanction()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetCustomerRecordinSanction_Result>("GetCustomerRecordinSanction");
        }
    
        public virtual ObjectResult<string> Gl_SanctionDisburse_GoldLoanNo_RTR(Nullable<System.DateTime> loanDate)
        {
            var loanDateParameter = loanDate.HasValue ?
                new ObjectParameter("LoanDate", loanDate) :
                new ObjectParameter("LoanDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("Gl_SanctionDisburse_GoldLoanNo_RTR", loanDateParameter);
        }
    
        public virtual ObjectResult<GL_SanctionDisburse_KYC_RTR_Result> GL_SanctionDisburse_KYC_RTR(Nullable<int> fYID, Nullable<int> branchId)
        {
            var fYIDParameter = fYID.HasValue ?
                new ObjectParameter("FYID", fYID) :
                new ObjectParameter("FYID", typeof(int));
    
            var branchIdParameter = branchId.HasValue ?
                new ObjectParameter("BranchId", branchId) :
                new ObjectParameter("BranchId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GL_SanctionDisburse_KYC_RTR_Result>("GL_SanctionDisburse_KYC_RTR", fYIDParameter, branchIdParameter);
        }
    
        public virtual int SP_InsertRecordInAccountMaster(string accountName, string loanAccountNo, Nullable<int> gPID, string panNo, string address, Nullable<int> areaID, string telephone, string mobile, string email, Nullable<int> financialYearId)
        {
            var accountNameParameter = accountName != null ?
                new ObjectParameter("AccountName", accountName) :
                new ObjectParameter("AccountName", typeof(string));
    
            var loanAccountNoParameter = loanAccountNo != null ?
                new ObjectParameter("LoanAccountNo", loanAccountNo) :
                new ObjectParameter("LoanAccountNo", typeof(string));
    
            var gPIDParameter = gPID.HasValue ?
                new ObjectParameter("GPID", gPID) :
                new ObjectParameter("GPID", typeof(int));
    
            var panNoParameter = panNo != null ?
                new ObjectParameter("PanNo", panNo) :
                new ObjectParameter("PanNo", typeof(string));
    
            var addressParameter = address != null ?
                new ObjectParameter("Address", address) :
                new ObjectParameter("Address", typeof(string));
    
            var areaIDParameter = areaID.HasValue ?
                new ObjectParameter("AreaID", areaID) :
                new ObjectParameter("AreaID", typeof(int));
    
            var telephoneParameter = telephone != null ?
                new ObjectParameter("Telephone", telephone) :
                new ObjectParameter("Telephone", typeof(string));
    
            var mobileParameter = mobile != null ?
                new ObjectParameter("Mobile", mobile) :
                new ObjectParameter("Mobile", typeof(string));
    
            var emailParameter = email != null ?
                new ObjectParameter("Email", email) :
                new ObjectParameter("Email", typeof(string));
    
            var financialYearIdParameter = financialYearId.HasValue ?
                new ObjectParameter("FinancialYearId", financialYearId) :
                new ObjectParameter("FinancialYearId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SP_InsertRecordInAccountMaster", accountNameParameter, loanAccountNoParameter, gPIDParameter, panNoParameter, addressParameter, areaIDParameter, telephoneParameter, mobileParameter, emailParameter, financialYearIdParameter);
        }
    
        public virtual int GL_SanctionDisburse_PRV(string operation, Nullable<int> sDID, string goldLoanNo, Nullable<int> sID, Nullable<int> kYCID, Nullable<int> cID, string loanType, Nullable<decimal> value, Nullable<decimal> sanctionAmount)
        {
            var operationParameter = operation != null ?
                new ObjectParameter("Operation", operation) :
                new ObjectParameter("Operation", typeof(string));
    
            var sDIDParameter = sDID.HasValue ?
                new ObjectParameter("SDID", sDID) :
                new ObjectParameter("SDID", typeof(int));
    
            var goldLoanNoParameter = goldLoanNo != null ?
                new ObjectParameter("GoldLoanNo", goldLoanNo) :
                new ObjectParameter("GoldLoanNo", typeof(string));
    
            var sIDParameter = sID.HasValue ?
                new ObjectParameter("SID", sID) :
                new ObjectParameter("SID", typeof(int));
    
            var kYCIDParameter = kYCID.HasValue ?
                new ObjectParameter("KYCID", kYCID) :
                new ObjectParameter("KYCID", typeof(int));
    
            var cIDParameter = cID.HasValue ?
                new ObjectParameter("CID", cID) :
                new ObjectParameter("CID", typeof(int));
    
            var loanTypeParameter = loanType != null ?
                new ObjectParameter("LoanType", loanType) :
                new ObjectParameter("LoanType", typeof(string));
    
            var valueParameter = value.HasValue ?
                new ObjectParameter("Value", value) :
                new ObjectParameter("Value", typeof(decimal));
    
            var sanctionAmountParameter = sanctionAmount.HasValue ?
                new ObjectParameter("SanctionAmount", sanctionAmount) :
                new ObjectParameter("SanctionAmount", typeof(decimal));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("GL_SanctionDisburse_PRV", operationParameter, sDIDParameter, goldLoanNoParameter, sIDParameter, kYCIDParameter, cIDParameter, loanTypeParameter, valueParameter, sanctionAmountParameter);
        }
    
        public virtual int SP_InsertRecordInFSystemGeneratedEntryMaster(Nullable<int> dJEID, string refType, Nullable<int> refNo, string referenceNo, string loginId, Nullable<int> financialYearId)
        {
            var dJEIDParameter = dJEID.HasValue ?
                new ObjectParameter("DJEID", dJEID) :
                new ObjectParameter("DJEID", typeof(int));
    
            var refTypeParameter = refType != null ?
                new ObjectParameter("RefType", refType) :
                new ObjectParameter("RefType", typeof(string));
    
            var refNoParameter = refNo.HasValue ?
                new ObjectParameter("RefNo", refNo) :
                new ObjectParameter("RefNo", typeof(int));
    
            var referenceNoParameter = referenceNo != null ?
                new ObjectParameter("ReferenceNo", referenceNo) :
                new ObjectParameter("ReferenceNo", typeof(string));
    
            var loginIdParameter = loginId != null ?
                new ObjectParameter("loginId", loginId) :
                new ObjectParameter("loginId", typeof(string));
    
            var financialYearIdParameter = financialYearId.HasValue ?
                new ObjectParameter("FinancialYearId", financialYearId) :
                new ObjectParameter("FinancialYearId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SP_InsertRecordInFSystemGeneratedEntryMaster", dJEIDParameter, refTypeParameter, refNoParameter, referenceNoParameter, loginIdParameter, financialYearIdParameter);
        }
    
        public virtual int SP_InsertRecordInChargePostingDetails(Nullable<int> iD, Nullable<int> sDID, string goldLoanNo, Nullable<int> accID, Nullable<double> debit, Nullable<double> credit, Nullable<int> ledgerID, Nullable<int> financialYearId)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            var sDIDParameter = sDID.HasValue ?
                new ObjectParameter("SDID", sDID) :
                new ObjectParameter("SDID", typeof(int));
    
            var goldLoanNoParameter = goldLoanNo != null ?
                new ObjectParameter("GoldLoanNo", goldLoanNo) :
                new ObjectParameter("GoldLoanNo", typeof(string));
    
            var accIDParameter = accID.HasValue ?
                new ObjectParameter("AccID", accID) :
                new ObjectParameter("AccID", typeof(int));
    
            var debitParameter = debit.HasValue ?
                new ObjectParameter("Debit", debit) :
                new ObjectParameter("Debit", typeof(double));
    
            var creditParameter = credit.HasValue ?
                new ObjectParameter("Credit", credit) :
                new ObjectParameter("Credit", typeof(double));
    
            var ledgerIDParameter = ledgerID.HasValue ?
                new ObjectParameter("LedgerID", ledgerID) :
                new ObjectParameter("LedgerID", typeof(int));
    
            var financialYearIdParameter = financialYearId.HasValue ?
                new ObjectParameter("FinancialYearId", financialYearId) :
                new ObjectParameter("FinancialYearId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SP_InsertRecordInChargePostingDetails", iDParameter, sDIDParameter, goldLoanNoParameter, accIDParameter, debitParameter, creditParameter, ledgerIDParameter, financialYearIdParameter);
        }
    
        public virtual int SP_InsertRecordInTBankCashPaymentDetails(Nullable<int> bCPID, string refType, Nullable<int> refNo, string referenceNo, Nullable<System.DateTime> refDate, Nullable<int> voucherNo, Nullable<int> bankCashAccID, Nullable<int> paidTo, Nullable<double> amount, string chqNo, Nullable<System.DateTime> chqDate, string narration, Nullable<int> financialYearId)
        {
            var bCPIDParameter = bCPID.HasValue ?
                new ObjectParameter("BCPID", bCPID) :
                new ObjectParameter("BCPID", typeof(int));
    
            var refTypeParameter = refType != null ?
                new ObjectParameter("RefType", refType) :
                new ObjectParameter("RefType", typeof(string));
    
            var refNoParameter = refNo.HasValue ?
                new ObjectParameter("RefNo", refNo) :
                new ObjectParameter("RefNo", typeof(int));
    
            var referenceNoParameter = referenceNo != null ?
                new ObjectParameter("ReferenceNo", referenceNo) :
                new ObjectParameter("ReferenceNo", typeof(string));
    
            var refDateParameter = refDate.HasValue ?
                new ObjectParameter("RefDate", refDate) :
                new ObjectParameter("RefDate", typeof(System.DateTime));
    
            var voucherNoParameter = voucherNo.HasValue ?
                new ObjectParameter("VoucherNo", voucherNo) :
                new ObjectParameter("VoucherNo", typeof(int));
    
            var bankCashAccIDParameter = bankCashAccID.HasValue ?
                new ObjectParameter("BankCashAccID", bankCashAccID) :
                new ObjectParameter("BankCashAccID", typeof(int));
    
            var paidToParameter = paidTo.HasValue ?
                new ObjectParameter("PaidTo", paidTo) :
                new ObjectParameter("PaidTo", typeof(int));
    
            var amountParameter = amount.HasValue ?
                new ObjectParameter("Amount", amount) :
                new ObjectParameter("Amount", typeof(double));
    
            var chqNoParameter = chqNo != null ?
                new ObjectParameter("ChqNo", chqNo) :
                new ObjectParameter("ChqNo", typeof(string));
    
            var chqDateParameter = chqDate.HasValue ?
                new ObjectParameter("ChqDate", chqDate) :
                new ObjectParameter("ChqDate", typeof(System.DateTime));
    
            var narrationParameter = narration != null ?
                new ObjectParameter("Narration", narration) :
                new ObjectParameter("Narration", typeof(string));
    
            var financialYearIdParameter = financialYearId.HasValue ?
                new ObjectParameter("FinancialYearId", financialYearId) :
                new ObjectParameter("FinancialYearId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SP_InsertRecordInTBankCashPaymentDetails", bCPIDParameter, refTypeParameter, refNoParameter, referenceNoParameter, refDateParameter, voucherNoParameter, bankCashAccIDParameter, paidToParameter, amountParameter, chqNoParameter, chqDateParameter, narrationParameter, financialYearIdParameter);
        }
    
        public virtual int SP_InsertRecordInSanctionChargeDetails(Nullable<int> cHID, Nullable<int> sDID, Nullable<int> chargeDetailsID, Nullable<double> charges, Nullable<double> amount, Nullable<int> accountId, Nullable<int> chargeId)
        {
            var cHIDParameter = cHID.HasValue ?
                new ObjectParameter("CHID", cHID) :
                new ObjectParameter("CHID", typeof(int));
    
            var sDIDParameter = sDID.HasValue ?
                new ObjectParameter("SDID", sDID) :
                new ObjectParameter("SDID", typeof(int));
    
            var chargeDetailsIDParameter = chargeDetailsID.HasValue ?
                new ObjectParameter("ChargeDetailsID", chargeDetailsID) :
                new ObjectParameter("ChargeDetailsID", typeof(int));
    
            var chargesParameter = charges.HasValue ?
                new ObjectParameter("Charges", charges) :
                new ObjectParameter("Charges", typeof(double));
    
            var amountParameter = amount.HasValue ?
                new ObjectParameter("Amount", amount) :
                new ObjectParameter("Amount", typeof(double));
    
            var accountIdParameter = accountId.HasValue ?
                new ObjectParameter("AccountId", accountId) :
                new ObjectParameter("AccountId", typeof(int));
    
            var chargeIdParameter = chargeId.HasValue ?
                new ObjectParameter("ChargeId", chargeId) :
                new ObjectParameter("ChargeId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SP_InsertRecordInSanctionChargeDetails", cHIDParameter, sDIDParameter, chargeDetailsIDParameter, chargesParameter, amountParameter, accountIdParameter, chargeIdParameter);
        }
    
        public virtual ObjectResult<GL_SanctionDisburse_Charges_RTR_Result1> GL_SanctionDisburse_Charges_RTR(Nullable<int> cID, Nullable<decimal> sanctionAmt)
        {
            var cIDParameter = cID.HasValue ?
                new ObjectParameter("CID", cID) :
                new ObjectParameter("CID", typeof(int));
    
            var sanctionAmtParameter = sanctionAmt.HasValue ?
                new ObjectParameter("SanctionAmt", sanctionAmt) :
                new ObjectParameter("SanctionAmt", typeof(decimal));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GL_SanctionDisburse_Charges_RTR_Result1>("GL_SanctionDisburse_Charges_RTR", cIDParameter, sanctionAmtParameter);
        }
    
        public virtual ObjectResult<GL_SanctionDisburse_RTR_Result> GL_SanctionDisburse_RTR(Nullable<int> fYID, Nullable<int> branchId)
        {
            var fYIDParameter = fYID.HasValue ?
                new ObjectParameter("FYID", fYID) :
                new ObjectParameter("FYID", typeof(int));
    
            var branchIdParameter = branchId.HasValue ?
                new ObjectParameter("BranchId", branchId) :
                new ObjectParameter("BranchId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GL_SanctionDisburse_RTR_Result>("GL_SanctionDisburse_RTR", fYIDParameter, branchIdParameter);
        }
    
        public virtual ObjectResult<GL_SanctionDisburseDetails_RTR_Result> GL_SanctionDisburseDetails_RTR(Nullable<int> sDID)
        {
            var sDIDParameter = sDID.HasValue ?
                new ObjectParameter("SDID", sDID) :
                new ObjectParameter("SDID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GL_SanctionDisburseDetails_RTR_Result>("GL_SanctionDisburseDetails_RTR", sDIDParameter);
        }
    
        public virtual int SP_SanctionDisburse_Delete(Nullable<int> sDID)
        {
            var sDIDParameter = sDID.HasValue ?
                new ObjectParameter("SDID", sDID) :
                new ObjectParameter("SDID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SP_SanctionDisburse_Delete", sDIDParameter);
        }
    
        public virtual int GLReceipt_GoldLoanDetails_RTR_New(Nullable<System.DateTime> rcvDate, Nullable<int> kYCID, Nullable<int> fYID, Nullable<int> branchId)
        {
            var rcvDateParameter = rcvDate.HasValue ?
                new ObjectParameter("RcvDate", rcvDate) :
                new ObjectParameter("RcvDate", typeof(System.DateTime));
    
            var kYCIDParameter = kYCID.HasValue ?
                new ObjectParameter("KYCID", kYCID) :
                new ObjectParameter("KYCID", typeof(int));
    
            var fYIDParameter = fYID.HasValue ?
                new ObjectParameter("FYID", fYID) :
                new ObjectParameter("FYID", typeof(int));
    
            var branchIdParameter = branchId.HasValue ?
                new ObjectParameter("BranchId", branchId) :
                new ObjectParameter("BranchId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("GLReceipt_GoldLoanDetails_RTR_New", rcvDateParameter, kYCIDParameter, fYIDParameter, branchIdParameter);
        }
    
        public virtual int GL_EmiCalculator_RTR(Nullable<System.DateTime> loanDate, Nullable<decimal> loanAmount, Nullable<int> sID, Nullable<int> neworOld, Nullable<System.DateTime> fromDate, Nullable<System.DateTime> toDate, Nullable<decimal> paidInt, Nullable<System.DateTime> oSInterestFromDate, Nullable<System.DateTime> oSInterestToDate, Nullable<decimal> oSIntAmt, Nullable<System.DateTime> advInterestFromDate, Nullable<System.DateTime> advInterestToDate, Nullable<decimal> advInterestAmt, Nullable<System.DateTime> calculateFromDate, Nullable<System.DateTime> calculateToDate, Nullable<decimal> lastROIID)
        {
            var loanDateParameter = loanDate.HasValue ?
                new ObjectParameter("LoanDate", loanDate) :
                new ObjectParameter("LoanDate", typeof(System.DateTime));
    
            var loanAmountParameter = loanAmount.HasValue ?
                new ObjectParameter("LoanAmount", loanAmount) :
                new ObjectParameter("LoanAmount", typeof(decimal));
    
            var sIDParameter = sID.HasValue ?
                new ObjectParameter("SID", sID) :
                new ObjectParameter("SID", typeof(int));
    
            var neworOldParameter = neworOld.HasValue ?
                new ObjectParameter("NeworOld", neworOld) :
                new ObjectParameter("NeworOld", typeof(int));
    
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("FromDate", fromDate) :
                new ObjectParameter("FromDate", typeof(System.DateTime));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("ToDate", toDate) :
                new ObjectParameter("ToDate", typeof(System.DateTime));
    
            var paidIntParameter = paidInt.HasValue ?
                new ObjectParameter("PaidInt", paidInt) :
                new ObjectParameter("PaidInt", typeof(decimal));
    
            var oSInterestFromDateParameter = oSInterestFromDate.HasValue ?
                new ObjectParameter("OSInterestFromDate", oSInterestFromDate) :
                new ObjectParameter("OSInterestFromDate", typeof(System.DateTime));
    
            var oSInterestToDateParameter = oSInterestToDate.HasValue ?
                new ObjectParameter("OSInterestToDate", oSInterestToDate) :
                new ObjectParameter("OSInterestToDate", typeof(System.DateTime));
    
            var oSIntAmtParameter = oSIntAmt.HasValue ?
                new ObjectParameter("OSIntAmt", oSIntAmt) :
                new ObjectParameter("OSIntAmt", typeof(decimal));
    
            var advInterestFromDateParameter = advInterestFromDate.HasValue ?
                new ObjectParameter("AdvInterestFromDate", advInterestFromDate) :
                new ObjectParameter("AdvInterestFromDate", typeof(System.DateTime));
    
            var advInterestToDateParameter = advInterestToDate.HasValue ?
                new ObjectParameter("AdvInterestToDate", advInterestToDate) :
                new ObjectParameter("AdvInterestToDate", typeof(System.DateTime));
    
            var advInterestAmtParameter = advInterestAmt.HasValue ?
                new ObjectParameter("AdvInterestAmt", advInterestAmt) :
                new ObjectParameter("AdvInterestAmt", typeof(decimal));
    
            var calculateFromDateParameter = calculateFromDate.HasValue ?
                new ObjectParameter("CalculateFromDate", calculateFromDate) :
                new ObjectParameter("CalculateFromDate", typeof(System.DateTime));
    
            var calculateToDateParameter = calculateToDate.HasValue ?
                new ObjectParameter("CalculateToDate", calculateToDate) :
                new ObjectParameter("CalculateToDate", typeof(System.DateTime));
    
            var lastROIIDParameter = lastROIID.HasValue ?
                new ObjectParameter("LastROIID", lastROIID) :
                new ObjectParameter("LastROIID", typeof(decimal));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("GL_EmiCalculator_RTR", loanDateParameter, loanAmountParameter, sIDParameter, neworOldParameter, fromDateParameter, toDateParameter, paidIntParameter, oSInterestFromDateParameter, oSInterestToDateParameter, oSIntAmtParameter, advInterestFromDateParameter, advInterestToDateParameter, advInterestAmtParameter, calculateFromDateParameter, calculateToDateParameter, lastROIIDParameter);
        }
    
        public virtual int SP_SanctionDisburse_PRI(string operation, Nullable<int> sDID, string loanType, Nullable<System.DateTime> loanDate, string goldLoanNo, Nullable<int> kYCID, Nullable<decimal> eligibleLoanAmt, Nullable<decimal> netLoanAmtSanctioned, Nullable<decimal> chargesTotal, Nullable<decimal> netLoanPayable, string cheqNEFTDD, string cheqNEFTDDNo, Nullable<System.DateTime> cheqNEFTDDDate, Nullable<decimal> totalGrossWeight, Nullable<decimal> totalNetWeight, Nullable<decimal> totalQuantity, Nullable<decimal> totalvalue, Nullable<decimal> totalRate, Nullable<int> sID, Nullable<System.DateTime> dueDate, byte[] ownershipProofImagePath, string cIBILScore, Nullable<int> bCPID, Nullable<int> cashOutWardById, Nullable<int> goldInWardById, Nullable<int> createdBy, Nullable<int> fYID, Nullable<int> branchID, Nullable<int> cMPID, Nullable<int> cashAccID, Nullable<decimal> cashAmount, Nullable<int> bankCashAccID, Nullable<decimal> bankAmount, string paymentMode, Nullable<int> lineno, Nullable<System.DateTime> bankPaymentDate, string lockerNo, string packetWeight, string rackNo, string remark, Nullable<System.DateTime> goldInwardDate, Nullable<int> preSanctionId)
        {
            var operationParameter = operation != null ?
                new ObjectParameter("Operation", operation) :
                new ObjectParameter("Operation", typeof(string));
    
            var sDIDParameter = sDID.HasValue ?
                new ObjectParameter("SDID", sDID) :
                new ObjectParameter("SDID", typeof(int));
    
            var loanTypeParameter = loanType != null ?
                new ObjectParameter("LoanType", loanType) :
                new ObjectParameter("LoanType", typeof(string));
    
            var loanDateParameter = loanDate.HasValue ?
                new ObjectParameter("LoanDate", loanDate) :
                new ObjectParameter("LoanDate", typeof(System.DateTime));
    
            var goldLoanNoParameter = goldLoanNo != null ?
                new ObjectParameter("GoldLoanNo", goldLoanNo) :
                new ObjectParameter("GoldLoanNo", typeof(string));
    
            var kYCIDParameter = kYCID.HasValue ?
                new ObjectParameter("KYCID", kYCID) :
                new ObjectParameter("KYCID", typeof(int));
    
            var eligibleLoanAmtParameter = eligibleLoanAmt.HasValue ?
                new ObjectParameter("EligibleLoanAmt", eligibleLoanAmt) :
                new ObjectParameter("EligibleLoanAmt", typeof(decimal));
    
            var netLoanAmtSanctionedParameter = netLoanAmtSanctioned.HasValue ?
                new ObjectParameter("NetLoanAmtSanctioned", netLoanAmtSanctioned) :
                new ObjectParameter("NetLoanAmtSanctioned", typeof(decimal));
    
            var chargesTotalParameter = chargesTotal.HasValue ?
                new ObjectParameter("ChargesTotal", chargesTotal) :
                new ObjectParameter("ChargesTotal", typeof(decimal));
    
            var netLoanPayableParameter = netLoanPayable.HasValue ?
                new ObjectParameter("NetLoanPayable", netLoanPayable) :
                new ObjectParameter("NetLoanPayable", typeof(decimal));
    
            var cheqNEFTDDParameter = cheqNEFTDD != null ?
                new ObjectParameter("CheqNEFTDD", cheqNEFTDD) :
                new ObjectParameter("CheqNEFTDD", typeof(string));
    
            var cheqNEFTDDNoParameter = cheqNEFTDDNo != null ?
                new ObjectParameter("CheqNEFTDDNo", cheqNEFTDDNo) :
                new ObjectParameter("CheqNEFTDDNo", typeof(string));
    
            var cheqNEFTDDDateParameter = cheqNEFTDDDate.HasValue ?
                new ObjectParameter("CheqNEFTDDDate", cheqNEFTDDDate) :
                new ObjectParameter("CheqNEFTDDDate", typeof(System.DateTime));
    
            var totalGrossWeightParameter = totalGrossWeight.HasValue ?
                new ObjectParameter("TotalGrossWeight", totalGrossWeight) :
                new ObjectParameter("TotalGrossWeight", typeof(decimal));
    
            var totalNetWeightParameter = totalNetWeight.HasValue ?
                new ObjectParameter("TotalNetWeight", totalNetWeight) :
                new ObjectParameter("TotalNetWeight", typeof(decimal));
    
            var totalQuantityParameter = totalQuantity.HasValue ?
                new ObjectParameter("TotalQuantity", totalQuantity) :
                new ObjectParameter("TotalQuantity", typeof(decimal));
    
            var totalvalueParameter = totalvalue.HasValue ?
                new ObjectParameter("Totalvalue", totalvalue) :
                new ObjectParameter("Totalvalue", typeof(decimal));
    
            var totalRateParameter = totalRate.HasValue ?
                new ObjectParameter("TotalRate", totalRate) :
                new ObjectParameter("TotalRate", typeof(decimal));
    
            var sIDParameter = sID.HasValue ?
                new ObjectParameter("SID", sID) :
                new ObjectParameter("SID", typeof(int));
    
            var dueDateParameter = dueDate.HasValue ?
                new ObjectParameter("DueDate", dueDate) :
                new ObjectParameter("DueDate", typeof(System.DateTime));
    
            var ownershipProofImagePathParameter = ownershipProofImagePath != null ?
                new ObjectParameter("OwnershipProofImagePath", ownershipProofImagePath) :
                new ObjectParameter("OwnershipProofImagePath", typeof(byte[]));
    
            var cIBILScoreParameter = cIBILScore != null ?
                new ObjectParameter("CIBILScore", cIBILScore) :
                new ObjectParameter("CIBILScore", typeof(string));
    
            var bCPIDParameter = bCPID.HasValue ?
                new ObjectParameter("BCPID", bCPID) :
                new ObjectParameter("BCPID", typeof(int));
    
            var cashOutWardByIdParameter = cashOutWardById.HasValue ?
                new ObjectParameter("CashOutWardById", cashOutWardById) :
                new ObjectParameter("CashOutWardById", typeof(int));
    
            var goldInWardByIdParameter = goldInWardById.HasValue ?
                new ObjectParameter("GoldInWardById", goldInWardById) :
                new ObjectParameter("GoldInWardById", typeof(int));
    
            var createdByParameter = createdBy.HasValue ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(int));
    
            var fYIDParameter = fYID.HasValue ?
                new ObjectParameter("FYID", fYID) :
                new ObjectParameter("FYID", typeof(int));
    
            var branchIDParameter = branchID.HasValue ?
                new ObjectParameter("BranchID", branchID) :
                new ObjectParameter("BranchID", typeof(int));
    
            var cMPIDParameter = cMPID.HasValue ?
                new ObjectParameter("CMPID", cMPID) :
                new ObjectParameter("CMPID", typeof(int));
    
            var cashAccIDParameter = cashAccID.HasValue ?
                new ObjectParameter("CashAccID", cashAccID) :
                new ObjectParameter("CashAccID", typeof(int));
    
            var cashAmountParameter = cashAmount.HasValue ?
                new ObjectParameter("CashAmount", cashAmount) :
                new ObjectParameter("CashAmount", typeof(decimal));
    
            var bankCashAccIDParameter = bankCashAccID.HasValue ?
                new ObjectParameter("BankCashAccID", bankCashAccID) :
                new ObjectParameter("BankCashAccID", typeof(int));
    
            var bankAmountParameter = bankAmount.HasValue ?
                new ObjectParameter("BankAmount", bankAmount) :
                new ObjectParameter("BankAmount", typeof(decimal));
    
            var paymentModeParameter = paymentMode != null ?
                new ObjectParameter("PaymentMode", paymentMode) :
                new ObjectParameter("PaymentMode", typeof(string));
    
            var linenoParameter = lineno.HasValue ?
                new ObjectParameter("Lineno", lineno) :
                new ObjectParameter("Lineno", typeof(int));
    
            var bankPaymentDateParameter = bankPaymentDate.HasValue ?
                new ObjectParameter("BankPaymentDate", bankPaymentDate) :
                new ObjectParameter("BankPaymentDate", typeof(System.DateTime));
    
            var lockerNoParameter = lockerNo != null ?
                new ObjectParameter("LockerNo", lockerNo) :
                new ObjectParameter("LockerNo", typeof(string));
    
            var packetWeightParameter = packetWeight != null ?
                new ObjectParameter("PacketWeight", packetWeight) :
                new ObjectParameter("PacketWeight", typeof(string));
    
            var rackNoParameter = rackNo != null ?
                new ObjectParameter("RackNo", rackNo) :
                new ObjectParameter("RackNo", typeof(string));
    
            var remarkParameter = remark != null ?
                new ObjectParameter("Remark", remark) :
                new ObjectParameter("Remark", typeof(string));
    
            var goldInwardDateParameter = goldInwardDate.HasValue ?
                new ObjectParameter("GoldInwardDate", goldInwardDate) :
                new ObjectParameter("GoldInwardDate", typeof(System.DateTime));
    
            var preSanctionIdParameter = preSanctionId.HasValue ?
                new ObjectParameter("PreSanctionId", preSanctionId) :
                new ObjectParameter("PreSanctionId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SP_SanctionDisburse_PRI", operationParameter, sDIDParameter, loanTypeParameter, loanDateParameter, goldLoanNoParameter, kYCIDParameter, eligibleLoanAmtParameter, netLoanAmtSanctionedParameter, chargesTotalParameter, netLoanPayableParameter, cheqNEFTDDParameter, cheqNEFTDDNoParameter, cheqNEFTDDDateParameter, totalGrossWeightParameter, totalNetWeightParameter, totalQuantityParameter, totalvalueParameter, totalRateParameter, sIDParameter, dueDateParameter, ownershipProofImagePathParameter, cIBILScoreParameter, bCPIDParameter, cashOutWardByIdParameter, goldInWardByIdParameter, createdByParameter, fYIDParameter, branchIDParameter, cMPIDParameter, cashAccIDParameter, cashAmountParameter, bankCashAccIDParameter, bankAmountParameter, paymentModeParameter, linenoParameter, bankPaymentDateParameter, lockerNoParameter, packetWeightParameter, rackNoParameter, remarkParameter, goldInwardDateParameter, preSanctionIdParameter);
        }
    
        public virtual int DeleteSanctionDisbursementData(Nullable<int> accountID, string referenceNo, string loanAccountNo, Nullable<int> sDID)
        {
            var accountIDParameter = accountID.HasValue ?
                new ObjectParameter("AccountID", accountID) :
                new ObjectParameter("AccountID", typeof(int));
    
            var referenceNoParameter = referenceNo != null ?
                new ObjectParameter("ReferenceNo", referenceNo) :
                new ObjectParameter("ReferenceNo", typeof(string));
    
            var loanAccountNoParameter = loanAccountNo != null ?
                new ObjectParameter("LoanAccountNo", loanAccountNo) :
                new ObjectParameter("LoanAccountNo", typeof(string));
    
            var sDIDParameter = sDID.HasValue ?
                new ObjectParameter("SDID", sDID) :
                new ObjectParameter("SDID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DeleteSanctionDisbursementData", accountIDParameter, referenceNoParameter, loanAccountNoParameter, sDIDParameter);
        }
    
        public virtual int SP_InsertrecordinFCompanyYearEndClosing(Nullable<int> iD, Nullable<int> financialyearID, Nullable<int> compID, Nullable<int> accountID, Nullable<double> openingBalanceDebit, Nullable<double> openingBalanceCredit, Nullable<double> currentDebit, Nullable<double> currentCredit, Nullable<double> closingBalanceDebit, Nullable<double> closingBalanceCredit)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            var financialyearIDParameter = financialyearID.HasValue ?
                new ObjectParameter("FinancialyearID", financialyearID) :
                new ObjectParameter("FinancialyearID", typeof(int));
    
            var compIDParameter = compID.HasValue ?
                new ObjectParameter("CompID", compID) :
                new ObjectParameter("CompID", typeof(int));
    
            var accountIDParameter = accountID.HasValue ?
                new ObjectParameter("AccountID", accountID) :
                new ObjectParameter("AccountID", typeof(int));
    
            var openingBalanceDebitParameter = openingBalanceDebit.HasValue ?
                new ObjectParameter("OpeningBalanceDebit", openingBalanceDebit) :
                new ObjectParameter("OpeningBalanceDebit", typeof(double));
    
            var openingBalanceCreditParameter = openingBalanceCredit.HasValue ?
                new ObjectParameter("OpeningBalanceCredit", openingBalanceCredit) :
                new ObjectParameter("OpeningBalanceCredit", typeof(double));
    
            var currentDebitParameter = currentDebit.HasValue ?
                new ObjectParameter("CurrentDebit", currentDebit) :
                new ObjectParameter("CurrentDebit", typeof(double));
    
            var currentCreditParameter = currentCredit.HasValue ?
                new ObjectParameter("CurrentCredit", currentCredit) :
                new ObjectParameter("CurrentCredit", typeof(double));
    
            var closingBalanceDebitParameter = closingBalanceDebit.HasValue ?
                new ObjectParameter("ClosingBalanceDebit", closingBalanceDebit) :
                new ObjectParameter("ClosingBalanceDebit", typeof(double));
    
            var closingBalanceCreditParameter = closingBalanceCredit.HasValue ?
                new ObjectParameter("ClosingBalanceCredit", closingBalanceCredit) :
                new ObjectParameter("ClosingBalanceCredit", typeof(double));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SP_InsertrecordinFCompanyYearEndClosing", iDParameter, financialyearIDParameter, compIDParameter, accountIDParameter, openingBalanceDebitParameter, openingBalanceCreditParameter, currentDebitParameter, currentCreditParameter, closingBalanceDebitParameter, closingBalanceCreditParameter);
        }
    
        public virtual int SP_SaveKYCHistory(Nullable<int> kycid)
        {
            var kycidParameter = kycid.HasValue ?
                new ObjectParameter("kycid", kycid) :
                new ObjectParameter("kycid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SP_SaveKYCHistory", kycidParameter);
        }
    
        public virtual ObjectResult<GL_SanctionDisburse_KYC_Details_RTR_Result3> GL_SanctionDisburse_KYC_Details_RTR(Nullable<int> preSanctionId, Nullable<int> fYID, Nullable<int> branchId)
        {
            var preSanctionIdParameter = preSanctionId.HasValue ?
                new ObjectParameter("PreSanctionId", preSanctionId) :
                new ObjectParameter("PreSanctionId", typeof(int));
    
            var fYIDParameter = fYID.HasValue ?
                new ObjectParameter("FYID", fYID) :
                new ObjectParameter("FYID", typeof(int));
    
            var branchIdParameter = branchId.HasValue ?
                new ObjectParameter("BranchId", branchId) :
                new ObjectParameter("BranchId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GL_SanctionDisburse_KYC_Details_RTR_Result3>("GL_SanctionDisburse_KYC_Details_RTR", preSanctionIdParameter, fYIDParameter, branchIdParameter);
        }
    }
}

@model MangalWeb.Model.Transaction.SanctionDisbursementVM
@{
    ViewBag.Title = "SanctionDisbursement";
    Layout = "~/Views/Shared/_Layout.cshtml";
}
@Styles.Render("~/Content/dataTablescss")

@using (Ajax.BeginForm("", "", new AjaxOptions { }, new { enctype = "multipart/form-data" }))
{
    @Html.AntiForgeryToken()
    @Html.HiddenFor(model => model.ID, new { @id = "ItemID" })
    <header id="topbar" class="affix">
        <div class="col-md-5 col-sm-4 col-xs-12">
            <div class="topbar-left">
                <h4>GL S&D Details</h4>
            </div><!--end of topbar-left-->
        </div><!--end of col-md-5-->
        <div class="col-md-7 col-sm-8 col-xs-12">
            <div class="topbar-right" id="headerbutton" @TempData["headerbutton"]>
                <button href="#editSanctionModal" id="btn_edit" onclick="return ShowEditTableList();" type="button" class="@TempData["btn_editclass"]" data-toggle="modal"><span class="fa fa-pencil pr5"></span> <span class="hidden-xs">Edit</span></button>
                <button type="submit" id="btn_save" class="@TempData["btn_saveclass"]"><span class="fa fa-save pr5"></span> <span class="hidden-xs">Save</span></button>
                <button type="button" id="btnDelete" class="mb -xs mt-xs mr-xs btn btn-danger"><span class="fa fa-trash pr5"></span> <span class="hidden-xs">Delete</span></button>
                <button href="#editSanctionModal" id="btn_view" onclick="return ShowViewTableList();" class="@TempData["btn_viewclass"]" type="button" data-toggle="modal">
                    <span class="fa fa-eye pr5"></span> <span class="hidden-xs">View</span>
                </button>
                <a href="@Html.Raw(@Url.Action("SanctionDisbursement", "SanctionDisbursement" ))" type="button" data-toggle="modal" class="btn btn-alert btn-md light fw600 ml10" title="Cancel" alt="Cancel"><span class="fa fa-close pr5"></span><span class="hidden-xs">Cancel</span></a>
            </div><!--end of topbar-right-->
        </div><!--end of col-md-7-->
    </header>

    <section id="content" class="animated fadeIn content_height">
        <div class="row">
            <div class="col-md-12">
                <div class="panel panel1 panel-primary">
                    <div class="admin-form">
                        <div class="panel-body">
                            <div class="section row mbn">
                                <div class="form-horizontal">
                                    <div class="col-md-12 col-lg-12 col-sm-12 col-xs-12">
                                        <div class="form-group">
                                            <label class="col-lg-2 col-md-2 col-sm-3 col-xs-12 control-label">Transaction ID<span class="text-danger"></span></label>
                                            <div class="col-lg-4 col-md-4 col-sm-4 col-xs-12">
                                                <span class="text-danger" id="CustomErr"> </span>
                                                @Html.EditorFor(model => model.TransactionId, new { htmlAttributes = new { @class = "form-control", @placeholder = "Transaction ID", @readonly = true } })
                                                @Html.HiddenFor(x => x.AreaId)
                                                @Html.HiddenFor(x => x.MobileNo)
                                                @Html.HiddenFor(x => x.TelephoneNo)
                                                @Html.HiddenFor(x => x.EmailId)
                                                @Html.HiddenFor(x => x.KYCID)
                                                @Html.HiddenFor(x => x.SchemeProcessingType)
                                                @Html.HiddenFor(x => x.SchemeProcessingCharge)
                                                @Html.HiddenFor(x => x.SchemeProcessingLimit)
                                                @Html.HiddenFor(x => x.StateID)
                                                @Html.HiddenFor(x => x.DiscountAmount)
                                                @Html.HiddenFor(x => x.CGSTAmount)
                                                @Html.HiddenFor(x => x.SGSTAmount)
                                                @Html.HiddenFor(x => x.CGSTTax)
                                                @Html.HiddenFor(x => x.SGSTTax)
                                                @Html.HiddenFor(x => x.CGSTAccountId)
                                                @Html.HiddenFor(x => x.SGSTAccountId)
                                                @Html.HiddenFor(x => x.CGSTAccountName)
                                                @Html.HiddenFor(x => x.SGSTAccountName)
                                                @Html.HiddenFor(x => x.PreSanctionId)
                                            </div>
                                            <label class="col-lg-2 col-md-2 col-sm-3 col-xs-12 control-label">Transaction Date<span class="text-danger"></span></label>
                                            <div class="col-lg-4 col-md-4 col-sm-4 col-xs-12">
                                                @Html.EditorFor(model => model.TransactionDate, new { htmlAttributes = new { @class = "form-control", @placeholder = "Transaction Date", @autocomplete = "Off" } })
                                            </div>
                                        </div>
                                    </div>
                                    <div class="col-md-12 col-lg-12 col-sm-12 col-xs-12">
                                        <div class="form-group">
                                            <label class="col-lg-2 col-md-2 col-sm-3 col-xs-12 control-label">Customer<span class="text-danger"> * </span></label>
                                            <div class="col-lg-4 col-md-4 col-sm-4 col-xs-12">
                                                @Html.EditorFor(model => model.CustomerID, new { htmlAttributes = new { @class = "form-control", @placeholder = "Customer ID", @autofocus = "autofocus", @readonly = true, @style = "display:inline;width:280px;" } })
                                                <div class="input-group-btn" style="display:inline;">
                                                    <button type="button" data-toggle="modal" data-target="#editModal" onclick="ShowClientTableList();" class="btn btn-info btn_info1">...</button>
                                                    @Html.ValidationMessageFor(model => model.CustomerID, "", new { @class = "text-danger" })
                                                </div>
                                            </div>
                                            <label class="col-lg-2 col-md-2 col-sm-3 col-xs-12 control-label">Application No<span class="text-danger"></span></label>
                                            <div class="col-lg-4 col-md-4 col-sm-4 col-xs-12">
                                                @Html.EditorFor(model => model.ApplicationNo, new { htmlAttributes = new { @class = "form-control", @placeholder = "Application No", @readonly = true } })
                                            </div>
                                        </div>
                                    </div>
                                    <div class="col-md-12 col-lg-12 col-sm-12 col-xs-12">
                                        <div class="form-group">
                                            <label class="col-lg-2 col-md-2 col-sm-3 col-xs-12 control-label">Loan Type<span class="text-danger"></span></label>
                                            <div class="col-lg-4 col-md-4 col-sm-4 col-xs-12">
                                                @Html.EditorFor(model => model.LoanType, new { htmlAttributes = new { @class = "form-control", @placeholder = "Loan Type", @readonly = true } })
                                            </div>
                                            <label class="col-lg-2 col-md-2 col-sm-3 col-xs-12 control-label">Loan Account No<span class="text-danger"></span></label>
                                            <div class="col-lg-4 col-md-4 col-sm-4 col-xs-12">
                                                @Html.EditorFor(model => model.LoanAccountNo, new { htmlAttributes = new { @class = "form-control", @placeholder = "Loan Account No", @readonly = true } })
                                            </div>
                                        </div>
                                    </div>
                                    <div class="col-md-12 col-lg-12 col-sm-12 col-xs-12">
                                        <div class="form-group">
                                            <label class="col-lg-2 col-md-2 col-sm-3 col-xs-12 control-label">Employee Name<span class="text-danger"></span></label>
                                            <div class="col-lg-4 col-md-4 col-sm-4 col-xs-12">
                                                @Html.EditorFor(model => model.EmployeeName, new { htmlAttributes = new { @class = "form-control", @placeholder = "Employee Name", @readonly = true } })
                                            </div>
                                            <label class="col-lg-2 col-md-2 col-sm-3 col-xs-12 control-label">Customer Name<span class="text-danger"></span></label>
                                            <div class="col-lg-4 col-md-4 col-sm-4 col-xs-12">
                                                @Html.EditorFor(model => model.CustomerName, new { htmlAttributes = new { @class = "form-control", @placeholder = "Customer Name", @readonly = true } })
                                            </div>
                                        </div>
                                    </div>
                                    <div class="col-md-12 col-lg-12 col-sm-12 col-xs-12">
                                        <div class="form-group">
                                            <label class="col-lg-2 col-md-2 col-sm-3 col-xs-12 control-label">Gender<span class="text-danger"></span></label>
                                            <div class="col-lg-4 col-md-4 col-sm-4 col-xs-12">
                                                @Html.EditorFor(model => model.Gender, new { htmlAttributes = new { @class = "form-control", @placeholder = "Gender", @readonly = true } })
                                            </div>
                                            <label class="col-lg-2 col-md-2 col-sm-3 col-xs-12 control-label">Birth Date<span class="text-danger"></span></label>
                                            <div class="col-lg-4 col-md-4 col-sm-4 col-xs-12">
                                                @Html.EditorFor(model => model.BirthDate, new { htmlAttributes = new { @class = "form-control", @placeholder = "Birth Date", @readonly = true } })
                                            </div>
                                        </div>
                                    </div>
                                    <div class="col-md-12 col-lg-12 col-sm-12 col-xs-12">
                                        <div class="form-group">
                                            <label class="col-lg-2 col-md-2 col-sm-3 col-xs-12 control-label">PAN No<span class="text-danger"></span></label>
                                            <div class="col-lg-4 col-md-4 col-sm-4 col-xs-12">
                                                @Html.EditorFor(model => model.PANNo, new { htmlAttributes = new { @class = "form-control", @placeholder = "PAN No", @readonly = true } })
                                            </div>
                                            <label class="col-lg-2 col-md-2 col-sm-3 col-xs-12 control-label">Marital Status<span class="text-danger"></span></label>
                                            <div class="col-lg-4 col-md-4 col-sm-4 col-xs-12">
                                                @Html.EditorFor(model => model.MaritalStatus, new { htmlAttributes = new { @class = "form-control", @placeholder = "Marital Status", @readonly = true } })
                                            </div>
                                        </div>
                                    </div>
                                    <div class="col-md-12 col-lg-12 col-sm-12 col-xs-12">
                                        <div class="form-group">
                                            <label class="col-lg-2 col-md-2 col-sm-3 col-xs-12 control-label">Age<span class="text-danger"></span></label>
                                            <div class="col-lg-4 col-md-4 col-sm-4 col-xs-12">
                                                @Html.EditorFor(model => model.Age, new { htmlAttributes = new { @class = "form-control", @placeholder = "Age", @readonly = true } })
                                            </div>
                                            <label class="col-lg-2 col-md-2 col-sm-3 col-xs-12 control-label">Customer Address<span class="text-danger"></span></label>
                                            <div class="col-lg-4 col-md-4 col-sm-4 col-xs-12">
                                                @Html.TextAreaFor(model => model.CustomerAddress, new { @class = "form-control", @placeholder = "Customer Address", @readonly = true })
                                            </div>
                                        </div>
                                    </div>
                                    <div class="col-md-12 col-lg-12 col-sm-12 col-xs-12">
                                        <div class="form-group">
                                            <label class="col-lg-2 col-md-2 col-sm-3 col-xs-12 control-label">Nominee Name<span class="text-danger"></span></label>
                                            <div class="col-lg-4 col-md-4 col-sm-4 col-xs-12">
                                                @Html.EditorFor(model => model.NomineeName, new { htmlAttributes = new { @class = "form-control", @placeholder = "Nominee Name", @readonly = true } })
                                            </div>
                                            <label class="col-lg-2 col-md-2 col-sm-3 col-xs-12 control-label">Nominee Relation<span class="text-danger"></span></label>
                                            <div class="col-lg-4 col-md-4 col-sm-4 col-xs-12">
                                                @Html.EditorFor(model => model.NomineeRelation, new { htmlAttributes = new { @class = "form-control", @placeholder = "Nominee Relation", @readonly = true } })
                                            </div>
                                        </div>
                                    </div>
                                    <div class="col-md-12 col-lg-12 col-sm-12 col-xs-12">
                                        <hr style="margin-top:0px;" />
                                        <label><b><u>Gold Item Details</u></b></label><br />
                                        <div class="panel-body panel-no-padding">
                                            <div>
                                                <table cellpadding="0" style="width:100%" cellspacing="0" border="0" class="table table-striped table-bordered table-hover table-fixed-header m0" id="tblGoldItemDetails">
                                                    <thead>
                                                        <tr>
                                                            <th style="text-align:left">Sr. No.</th>
                                                            <th style="text-align:left">Ornament Name</th>
                                                            <th style="text-align:left">Quantity</th>
                                                            <th style="text-align:left">Purity</th>
                                                            <th style="text-align:left">Gross Wt.(g)</th>
                                                            <th style="text-align:left">Deduction</th>
                                                            <th style="text-align:left">Rate Per Gram</th>
                                                            <th style="text-align:left">Net Wt.(g)</th>
                                                            <th style="text-align:left">Total Value</th>
                                                        </tr>
                                                    </thead>
                                                    <tbody></tbody>
                                                    <tfoot>
                                                    </tfoot>
                                                </table>
                                            </div>
                                        </div>
                                    </div>
                                    <div class="col-md-12 col-lg-12 col-sm-12 col-xs-12">
                                        <hr style="margin-top:0px;" />
                                        <label><b><u>Scheme Details</u></b></label><br />
                                        <div class="form-group">
                                            <label class="col-lg-2 col-md-2 col-sm-3 col-xs-12 control-label">Scheme Name<span class="text-danger"></span></label>
                                            <div class="col-lg-4 col-md-4 col-sm-4 col-xs-12">
                                                @Html.EditorFor(model => model.SchemeName, new { htmlAttributes = new { @class = "form-control", @placeholder = "Scheme Name", @readonly = true } })
                                                @Html.HiddenFor(model => model.SchemeId)
                                            </div>
                                            <label class="col-lg-2 col-md-2 col-sm-3 col-xs-12 control-label">Eligible Loan Amount<span class="text-danger"></span></label>
                                            <div class="col-lg-4 col-md-4 col-sm-4 col-xs-12">
                                                @Html.EditorFor(model => model.EligibleLoanAmount, new { htmlAttributes = new { @class = "form-control", @placeholder = "Eligible Loan Amount", @readonly = true } })
                                            </div>
                                        </div>
                                    </div>
                                    <div class="col-md-12 col-lg-12 col-sm-12 col-xs-12">
                                        <div class="form-group">
                                            <label class="col-lg-2 col-md-2 col-sm-3 col-xs-12 control-label">Tenure<span class="text-danger"></span></label>
                                            <div class="col-lg-4 col-md-4 col-sm-4 col-xs-12">
                                                @Html.EditorFor(model => model.Tenure, new { htmlAttributes = new { @class = "form-control", @placeholder = "Tenure", @readonly = true } })
                                            </div>
                                            <label class="col-lg-2 col-md-2 col-sm-3 col-xs-12 control-label">Sanction Loan Amt.<span class="text-danger">*</span></label>
                                            <div class="col-lg-4 col-md-4 col-sm-4 col-xs-12">
                                                @Html.EditorFor(model => model.SanctionLoanAmount, new { htmlAttributes = new { @class = "form-control", @placeholder = "Sanction Loan Amount", @autocomplete = "Off" } })
                                                <span class="text-danger" id="SanctionErrorMessage"></span>
                                            </div>
                                        </div>
                                        <div>
                                            <div class="form-group">
                                                <label class="col-lg-2 col-md-2 col-sm-3 col-xs-12 control-label">Maximum Loan Amount<span class="text-danger"></span></label>
                                                <div class="col-lg-4 col-md-4 col-sm-4 col-xs-12">
                                                    @Html.EditorFor(model => model.MaximumLoanAmount, new { htmlAttributes = new { @class = "form-control", @placeholder = "Maximum Loan Amount", @readonly = true } })
                                                </div>
                                                <label class="col-lg-2 col-md-2 col-sm-3 col-xs-12 control-label">Net Payable<span class="text-danger"></span></label>
                                                <div class="col-lg-4 col-md-4 col-sm-4 col-xs-12">
                                                    @Html.EditorFor(model => model.NetPayable, new { htmlAttributes = new { @class = "form-control", @placeholder = "Net Payable", @readonly = true } })
                                                </div>
                                            </div>
                                        </div>
                                    </div>
                                    <div class="col-md-12 col-lg-12 col-sm-12 col-xs-12">
                                        <hr style="margin-top:0px;" />
                                        <label><b><u>Charge Details</u></b></label><br /><br />
                                        <div class="row">
                                            <div class="col-md-12">
                                                <div class="form-group">
                                                    <label class="col-md-1 control-label"> Charge <span class="text-danger">  </span></label>
                                                    <div class="col-lg-3 col-md-3 col-sm-3 col-xs-12">
                                                        <div class="section">
                                                            <label class="field select">
                                                                @Html.DropDownListFor(m => m.ChargeVM.ChargeId, (SelectList)ViewBag.ChargeMasterList, "-- Select Charge --", htmlAttributes: new { @class = "form-control" })
                                                                <span class="text-danger small">@Html.ValidationMessageFor(m => m.ChargeVM.ChargeId)</span>
                                                                <i class="arrow"></i>
                                                            </label>
                                                        </div>
                                                    </div>
                                                    <label class="col-md-1 control-label" id="lblSerialNumber"> Type <span class="text-danger">  </span></label>
                                                    <div class="col-lg-2 col-md-2 col-sm-2 col-xs-12">
                                                        @Html.TextBoxFor(x => x.ChargeVM.ChargeType, new { @class = "form-control input-sm", @readonly = true })
                                                    </div>
                                                    <label class="col-md-1 control-label" id="lblSerialNumber"> Charges <span class="text-danger">  </span></label>
                                                    <div class="col-lg-3 col-md-3 col-sm-3 col-xs-12">
                                                        @Html.TextBoxFor(x => x.ChargeVM.Charges, new { @class = "form-control input-sm", @readonly = true })
                                                        @Html.TextBoxFor(x => x.ChargeVM.CDetailsID, new { @class = "form-control input-sm", @readonly = true, @style = "display:none;" })
                                                    </div>
                                                </div>
                                                <div class="form-group">

                                                    <label class="col-md-1 control-label" id="lblSerialNumber"> Amount <span class="text-danger">  </span></label>
                                                    <div class="col-lg-2 col-md-2 col-sm-2 col-xs-12">
                                                        @Html.TextBoxFor(x => x.ChargeVM.Amount, new { @class = "form-control input-sm", @onkeypress = "return event.charCode == 46 || (event.charCode >= 48 && event.charCode <= 57)", @maxlength = "8" })
                                                    </div>
                                                    <div class="col-lg-1 col-md-1 col-sm-1 col-xs-12"></div>
                                                    <label class="col-md-1 control-label"> Account <span class="text-danger">  </span></label>
                                                    <div class="col-lg-4 col-md-4 col-sm-4 col-xs-12">
                                                        <div class="section">
                                                            <label class="field select">
                                                                @Html.DropDownListFor(m => m.ChargeVM.AccountId, (SelectList)ViewBag.ChargeAccountList, "-- Select Account --", htmlAttributes: new { @class = "form-control" })
                                                                <span class="text-danger small">@Html.ValidationMessageFor(m => m.ChargeVM.AccountId)</span>
                                                                <i class="arrow"></i>
                                                            </label>
                                                        </div>
                                                    </div>
                                                    <input type="button" value="Add" class="btn btn-sm btn-primary" id="btnAddChargeDetails" />
                                                </div>
                                            </div>
                                        </div>
                                        <div class="panel-body panel-no-padding">
                                            <div id="divChargeDetails">
                                                <table cellpadding="0" style="width:100%" cellspacing="0" border="0" class="table table-striped table-bordered table-hover table-fixed-header m0" id="tblChargeDetails">
                                                    <thead>
                                                        <tr>
                                                            <th class="col-sm-2" style="width:2%">Sr.No.</th>
                                                            <th style="width:30%">Charge</th>
                                                            <th style="width:10%">Charges</th>
                                                            <th style="width:10%">Type</th>
                                                            <th style="width:10%">Amount</th>
                                                            <th style="width:30%">Account</th>
                                                            <th style="width:10%">Action</th>
                                                        </tr>
                                                    </thead>
                                                    <tbody></tbody>
                                                </table>
                                            </div>
                                        </div>
                                    </div>
                                    <div class="col-md-12 col-lg-12 col-sm-12 col-xs-12">
                                        <hr style="margin-top:0px;" />
                                        <label><b><u>Outstanding Details</u></b></label><br />
                                        <div class="form-group">
                                            <label class="col-lg-2 col-md-2 col-sm-3 col-xs-12 control-label">Principal<span class="text-danger"></span></label>
                                            <div class="col-lg-4 col-md-4 col-sm-4 col-xs-12" style="margin-top: 12px;">
                                                <label id="Principal"></label>
                                            </div>
                                            <label class="col-lg-2 col-md-2 col-sm-3 col-xs-12 control-label">Interest Repayment Date<span class="text-danger"></span></label>
                                            <div class="col-lg-4 col-md-4 col-sm-4 col-xs-12">
                                                @Html.EditorFor(model => model.InterestRepaymentDate, new { htmlAttributes = new { @class = "form-control", @placeholder = "Interest Repayment Date", @readonly = true } })
                                            </div>

                                        </div>
                                    </div>
                                    <div class="col-md-12 col-lg-12 col-sm-12 col-xs-12">
                                        <div class="form-group">
                                            <label class="col-lg-2 col-md-2 col-sm-3 col-xs-12 control-label">Interest<span class="text-danger"></span></label>
                                            <div class="col-lg-4 col-md-4 col-sm-4 col-xs-12" style="margin-top: 12px;">
                                                <label id="Interest"></label>
                                            </div>
                                            <label class="col-lg-2 col-md-2 col-sm-3 col-xs-12 control-label">Gold Item Image<span class="text-danger"></span></label>
                                            <div class="col-lg-4 col-md-4 col-sm-4 col-xs-12">
                                                <input type="file" name="GoldImage" id="GoldImage" class="form-data" accept=".png,.jpg,.jpeg,.gif,.pdf" />
                                            </div>
                                        </div>
                                    </div>
                                    <div class="col-md-12 col-lg-12 col-sm-12 col-xs-12">
                                        <div class="form-group">
                                            <label class="col-lg-2 col-md-2 col-sm-3 col-xs-12 control-label">Penal Interest<span class="text-danger"></span></label>
                                            <div class="col-lg-4 col-md-4 col-sm-4 col-xs-12" style="margin-top: 12px;">
                                                <label id="PenalInterest"></label>
                                            </div>
                                            <label class="col-lg-2 col-md-2 col-sm-3 col-xs-12 control-label">
                                                Proof of Ownership
                                                (If gross weight more than 20g)<span class="text-danger"></span>
                                            </label>
                                            <div class="col-lg-4 col-md-4 col-sm-4 col-xs-12">
                                                <input type="file" name="uploadFile" id="uploadFile" class="form-data" accept=".png,.jpg,.jpeg,.gif,.pdf" />
                                                @Html.ValidationMessageFor(model => model.ProofOfOwnerShipFile, "", new { @class = "text-danger" })
                                                <div id="ProofPhoto">
                                                </div>
                                            </div>
                                        </div>
                                    </div>
                                    <div class="col-md-12 col-lg-12 col-sm-12 col-xs-12">
                                        <div class="form-group">
                                            <label class="col-lg-2 col-md-2 col-sm-3 col-xs-12 control-label">Charges<span class="text-danger"></span></label>
                                            <div class="col-lg-4 col-md-4 col-sm-4 col-xs-12" style="margin-top: 12px;">
                                                <label id="Charges"></label>
                                            </div>
                                            <label class="col-lg-2 col-md-2 col-sm-3 col-xs-12 control-label">Packet Weight<span class="text-danger"></span></label>
                                            <div class="col-lg-4 col-md-4 col-sm-4 col-xs-12">
                                                @Html.EditorFor(model => model.PacketWeight, new { htmlAttributes = new { @class = "form-control", @placeholder = "Packet Weight", @autocomplete = "Off" } })
                                            </div>
                                        </div>
                                    </div>
                                    <div class="col-md-12 col-lg-12 col-sm-12 col-xs-12">
                                        <div class="form-group">
                                            <label class="col-lg-2 col-md-2 col-sm-3 col-xs-12 control-label">Total<span class="text-danger"></span></label>
                                            <div class="col-lg-4 col-md-4 col-sm-4 col-xs-12" style="margin-top: 12px;">
                                                <label id="Total"></label>
                                            </div>
                                            <label class="col-lg-2 col-md-2 col-sm-3 col-xs-12 control-label">Locker No<span class="text-danger"></span></label>
                                            <div class="col-lg-4 col-md-4 col-sm-4 col-xs-12">
                                                @Html.EditorFor(model => model.LockerNo, new { htmlAttributes = new { @class = "form-control", @placeholder = "Locker No", @maxlength = "10", @autocomplete = "Off" } })
                                            </div>
                                        </div>
                                    </div>
                                    <hr />
                                    <div class="col-md-12 col-lg-12 col-sm-12 col-xs-12">
                                        <hr style="margin-top:0px;" />
                                        <label><b><u>Bank Details</u></b></label><br />
                                        <div class="form-group">
                                            <label class="col-lg-2 col-md-2 col-sm-3 col-xs-12 control-label">Payment Mode<span class="text-danger"> * </span></label>
                                            <div class="col-lg-4 col-md-4 col-sm-4 col-xs-12">
                                                <div class="section">
                                                    <label class="field select">
                                                        @{
                                                            var PaymentModeList = new SelectList(new[]
                                                            {
                                                    new SelectListItem { Text = "Select Payment Mode"},
                                                    new SelectListItem { Text = "Chq/DD/NEFT", Value = "Chq/DD/NEFT"},
                                                    new SelectListItem { Text = "Cash", Value = "Cash"},
                                                    new SelectListItem { Text = "Both", Value = "Both"}
                                                    }, "Value", "Text");
                                                        }
                                                        @Html.DropDownListFor(m => m.PaymentMode, PaymentModeList)
                                                        <span class="text-danger" id="PaymentModeErrorMessage">@Html.ValidationMessageFor(m => m.PaymentMode)</span>
                                                        <i class="arrow"></i>
                                                    </label>
                                                </div>
                                                <br />
                                            </div>
                                        </div>
                                    </div>
                                    <div class="col-md-12 col-lg-12 col-sm-12 col-xs-12">
                                        <div class="form-group">
                                            <label class="col-lg-2 col-md-2 col-sm-3 col-xs-12 control-label">Bank A/c<span class="text-danger"></span></label>
                                            <div class="col-lg-4 col-md-4 col-sm-4 col-xs-12">
                                                <div class="section">
                                                    <label class="field select">
                                                        @Html.DropDownListFor(m => m.BankCashAccID, (SelectList)ViewBag.BankAccountList, "-- Select Account --", htmlAttributes: new { @class = "form-control" })
                                                        <span class="text-danger small">@Html.ValidationMessageFor(m => m.BankCashAccID)</span>
                                                        <i class="arrow"></i>
                                                    </label>
                                                </div>
                                            </div>
                                            <label class="col-lg-2 col-md-2 col-sm-3 col-xs-12 control-label">Bank Payment Date<span class="text-danger"></span></label>
                                            <div class="col-lg-4 col-md-4 col-sm-4 col-xs-12">
                                                @Html.EditorFor(model => model.BankPaymentDate, new { htmlAttributes = new { @class = "form-control", @placeholder = "Bank Payment Date", @autocomplete = "Off" } })
                                            </div>
                                        </div>
                                    </div>
                                    <div class="col-md-12 col-lg-12 col-sm-12 col-xs-12">
                                        <div class="form-group">
                                            <label class="col-lg-2 col-md-2 col-sm-3 col-xs-12 control-label">Chq/DD/NEFT<span class="text-danger"></span></label>
                                            <div class="col-lg-4 col-md-4 col-sm-4 col-xs-12">
                                                <div class="section">
                                                    <label class="field select">
                                                        @{
                                                            var ModeList = new SelectList(new[]
                                                            {
                                                    new SelectListItem { Text = "Select Chq/DD/NEFT"},
                                                    new SelectListItem { Text = "Cheque", Value = "Cheque"},
                                                    new SelectListItem { Text = "DD", Value = "DD"},
                                                    new SelectListItem { Text = "NEFT", Value = "NEFT"},
                                                    }, "Value", "Text");
                                                        }
                                                        @Html.DropDownListFor(m => m.CheqNEFTDD, ModeList)
                                                        <span class="text-danger">@Html.ValidationMessageFor(m => m.CheqNEFTDD)</span>
                                                        <i class="arrow"></i>
                                                    </label>
                                                </div>
                                            </div>
                                            <label class="col-lg-2 col-md-2 col-sm-3 col-xs-12 control-label">Chq/DD/NEFT No.<span class="text-danger"></span></label>
                                            <div class="col-lg-4 col-md-4 col-sm-4 col-xs-12">
                                                @Html.EditorFor(model => model.CheqNEFTDDNo, new { htmlAttributes = new { @class = "form-control", @placeholder = "Chq/DD/NEFT No.", @autocomplete = "Off" } })
                                            </div>
                                        </div>
                                    </div>
                                    <div class="col-md-12 col-lg-12 col-sm-12 col-xs-12">
                                        <div class="form-group">
                                            <label class="col-lg-2 col-md-2 col-sm-3 col-xs-12 control-label">Chq/DD/NEFT Date<span class="text-danger"></span></label>
                                            <div class="col-lg-4 col-md-4 col-sm-4 col-xs-12">
                                                @Html.EditorFor(model => model.CheqNEFTDDDate, new { htmlAttributes = new { @class = "form-control", @placeholder = "Chq/DD/NEFT Date", @autocomplete = "Off" } })
                                            </div>
                                            <label class="col-lg-2 col-md-2 col-sm-3 col-xs-12 control-label">Amount<span class="text-danger"></span></label>
                                            <div class="col-lg-4 col-md-4 col-sm-4 col-xs-12">
                                                @Html.EditorFor(model => model.BankAmount, new { htmlAttributes = new { @class = "form-control", @placeholder = "Amount", @autocomplete = "Off", @onkeypress = "return event.charCode == 46 || (event.charCode >= 48 && event.charCode <= 57)" } })
                                            </div>
                                        </div>
                                    </div>
                                    <div class="col-md-12 col-lg-12 col-sm-12 col-xs-12">
                                        <hr style="margin-top:0px;" />
                                        <label><b><u>Cash Outward Details</u></b></label><br />
                                        <div class="form-group">
                                            <label class="col-lg-2 col-md-2 col-sm-3 col-xs-12 control-label">Cash A/c<span class="text-danger"> * </span></label>
                                            <div class="col-lg-4 col-md-4 col-sm-4 col-xs-12">
                                                <div class="section">
                                                    <label class="field select">
                                                        @Html.DropDownListFor(m => m.CashAccountNo, (SelectList)ViewBag.CashAccountList, "-- Select Account --", htmlAttributes: new { @class = "form-control" })
                                                        <span class="text-danger small">@Html.ValidationMessageFor(m => m.CashAccountNo)</span>
                                                        <i class="arrow"></i>
                                                    </label>
                                                </div>
                                            </div>
                                            <label class="col-lg-2 col-md-2 col-sm-3 col-xs-12 control-label">Amount<span class="text-danger"> * </span></label>
                                            <div class="col-lg-4 col-md-4 col-sm-4 col-xs-12">
                                                @Html.EditorFor(model => model.CashAmount, new { htmlAttributes = new { @class = "form-control", @placeholder = "Cash Amount", @autocomplete = "Off", @onkeypress = "return event.charCode == 46 || (event.charCode >= 48 && event.charCode <= 57)" } })
                                            </div>
                                        </div>
                                    </div>
                                    <div class="col-md-12 col-lg-12 col-sm-12 col-xs-12">
                                        <div class="form-group">
                                            <label class="col-lg-2 col-md-2 col-sm-3 col-xs-12 control-label">Outward by<span class="text-danger"> * </span></label>
                                            <div class="col-lg-4 col-md-4 col-sm-4 col-xs-12">
                                                <div class="section">
                                                    <label class="field select">
                                                        @Html.DropDownListFor(m => m.CashOutwardbyNo, (SelectList)ViewBag.CashOutwardList, "--Select Outward By--", htmlAttributes: new { @class = "form-control" })
                                                        <span class="text-danger small">@Html.ValidationMessageFor(m => m.CashOutwardbyNo)</span>
                                                        <i class="arrow"></i>
                                                    </label>
                                                </div>
                                            </div>
                                        </div>
                                    </div>
                                    <div class="col-md-12 col-lg-12 col-sm-12 col-xs-12">
                                        <hr style="margin-top:0px;" />
                                        <label><b><u>Gold Inward Details</u></b></label><br />
                                        <div class="form-group">
                                            <label class="col-lg-2 col-md-2 col-sm-3 col-xs-12 control-label">Gold InwardBy<span class="text-danger"> * </span></label>
                                            <div class="col-lg-4 col-md-4 col-sm-4 col-xs-12">
                                                <div class="section">
                                                    <label class="field select">
                                                        @Html.DropDownListFor(m => m.GoldInwardByNo, (SelectList)ViewBag.GoldInwardList, "--Select Inward By--", htmlAttributes: new { @class = "form-control" })
                                                        <span class="text-danger small">@Html.ValidationMessageFor(m => m.GoldInwardByNo)</span>
                                                        <i class="arrow"></i>
                                                    </label>
                                                </div>
                                            </div>
                                            <label class="col-lg-2 col-md-2 col-sm-3 col-xs-12 control-label">Rack No<span class="text-danger"> * </span></label>
                                            <div class="col-lg-4 col-md-4 col-sm-4 col-xs-12">
                                                @Html.EditorFor(model => model.RackNo, new { htmlAttributes = new { @class = "form-control", @placeholder = "Rack No", @autocomplete = "Off" } })
                                            </div>
                                        </div>
                                    </div>
                                    <div class="col-md-12 col-lg-12 col-sm-12 col-xs-12">
                                        <div class="form-group">
                                            <label class="col-lg-2 col-md-2 col-sm-3 col-xs-12 control-label">Remark<span class="text-danger"></span></label>
                                            <div class="col-lg-4 col-md-4 col-sm-4 col-xs-12">
                                                @Html.TextAreaFor(model => model.Remark, new { @class = "form-control", @placeholder = "Remark", @autocomplete = "Off", @cols = "2", @rows = "2", @style = "resize: none;" })
                                            </div>
                                            <label class="col-lg-2 col-md-2 col-sm-3 col-xs-12 control-label">Gold Inward Date<span class="text-danger"> * </span></label>
                                            <div class="col-lg-4 col-md-4 col-sm-4 col-xs-12">
                                                @Html.EditorFor(model => model.GoldInwardDate, new { htmlAttributes = new { @class = "form-control", @placeholder = "Gold Inward Date", @autocomplete = "Off" } })
                                            </div>
                                        </div>
                                    </div>

                                </div>
                                <small style="float:right;"><span class="text-danger">* </span>indicates compulsary fields</small>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </section>
                                                            }
@section javascriptsection{
    @Scripts.Render("~/bundles/jquerydataTablesJS")

    <script type="text/javascript">
        $(document).ready(function () {

            $(':input[readonly]').css({'background-color':'#faf4b3'});

            if ($("#ItemID").val() ==0) {
                $("#CashAccountNo").attr('disabled','disabled');
                $("#CashAmount").attr('disabled','disabled');
                $("#BankCashAccID").attr('disabled','disabled');
                $("#BankPaymentDate").attr('disabled','disabled');
                $("#CheqNEFTDD").attr('disabled','disabled');
                $("#CheqNEFTDDNo").attr('disabled','disabled');
                $("#CheqNEFTDDDate").attr('disabled','disabled');
                $("#BankAmount").attr('disabled','disabled');
            }

            $("#CashAmount").on('keyup', function () {
                var netPayable = $("#NetPayable").val();
                var CashAmount = $("#CashAmount").val();
                if (parseFloat(CashAmount) > parseFloat(netPayable)) {
                    alert('Cash Amount can not be greater than Net Payable');
                    $("#CashAmount").val(0);
                    $("#CashAmount").focus()
                    return;
                }
            });

            $("#BankAmount").on('keyup', function () {
                var netPayable = $("#NetPayable").val();
                var BankAmount = $("#BankAmount").val();
                if (parseFloat(BankAmount) > parseFloat(netPayable)) {
                    alert('Bank Amount can not be greater than Net Payable');
                    $("#BankAmount").val(0);
                    $("#BankAmount").focus()
                    return;
                }
            });

            $("#divGoldItemDetails").hide();
            if (@Model.EligibleLoanAmountValuationDetailsVMList.Count() > 0) {
                $("#divGoldItemDetails").show();
            }

            $("#divChargeDetails").hide();
            if (@Model.ChargeDetailList.Count() > 0) {
                $("#divChargeDetails").show();
            }

            $("#TransactionDate").datepicker({ dateFormat: 'dd/mm/yy', changeMonth: true, changeYear: true,maxDate:new Date() });
            $("#BankPaymentDate").datepicker({ dateFormat: 'dd/mm/yy', changeMonth: true, changeYear: true,maxDate:new Date() });
            $("#ChqDDNEFTDate").datepicker({ dateFormat: 'dd/mm/yy', changeMonth: true, changeYear: true });
            $("#GoldInwardDate").datepicker({ dateFormat: 'dd/mm/yy', changeMonth: true, changeYear: true });
        });

        $("#SanctionLoanAmount").on('keyup', function () {
            var sanctionamount = $("#SanctionLoanAmount").val();
            var EligibleLoanAmount = $("#EligibleLoanAmount").val();
            $("#SanctionErrorMessage").text("");
            if (parseFloat(sanctionamount) > parseFloat(EligibleLoanAmount)) {
                alert('Sanction Loan Amount can not be greater than Eligible Loan Amount');
                $("#SanctionLoanAmount").val(0);
                $("#NetPayable").val(0);
                $("#SanctionLoanAmount").focus()
                return;
            }
            if (sanctionamount == 0) {
                $("#NetPayable").val(0);
            }
            else {
                var discountamount=$("#DiscountAmount").val();
                var chargetype=$("#SchemeProcessingType").val();
                if(chargetype=="Amount")
                {
                    $("#NetPayable").val(parseFloat(sanctionamount).toFixed(0)-parseFloat(discountamount).toFixed(0));
                }
                else{
                    $("#NetPayable").val(parseFloat(sanctionamount).toFixed(0)-parseFloat(discountamount).toFixed(0));
                }
            }
        });

        $("#btn_save").click(function () {
            SaveSanctionDisbursement();
        });

        function SaveSanctionDisbursement() {
            debugger;
            var SanctionViewModel = {};
            var check=true;
            SanctionViewModel.TransactionId = $("#TransactionId").val();
            SanctionViewModel.CustomerId = $("#CustomerID").val();
            SanctionViewModel.KYCID = $("#KYCID").val();
            SanctionViewModel.AreaId=$("#AreaId").val();
            SanctionViewModel.MobileNo=$("#MobileNo").val();
            SanctionViewModel.TelephoneNo=$("#TelephoneNo").val();
            SanctionViewModel.EmailId=$("#EmailId").val();
            SanctionViewModel.TransactionDate = $("#TransactionDate").val();
            SanctionViewModel.LoanType = $("#LoanType").val();
            SanctionViewModel.LoanAccountNo = $("#LoanAccountNo").val();
            SanctionViewModel.CustomerName = $("#CustomerName").val();
            SanctionViewModel.PANNo = $("#PANNo").val();
            SanctionViewModel.CustomerAddress=$("#CustomerAddress").val();
            SanctionViewModel.EligibleLoanAmount = $("#EligibleLoanAmount").val();
            SanctionViewModel.SanctionLoanAmount = $("#SanctionLoanAmount").val();
            SanctionViewModel.NetPayable = $("#NetPayable").val();
            SanctionViewModel.InterestRepaymentDate = $("#InterestRepaymentDate").val();
            SanctionViewModel.PacketWeight=$("#PacketWeight").val();
            SanctionViewModel.LockerNo=$("#LockerNo").val();
            SanctionViewModel.SchemeId=$("#SchemeId").val();
            SanctionViewModel.PaymentMode = $("#PaymentMode").val();
            SanctionViewModel.BankCashAccID = $("#BankCashAccID").val();
            SanctionViewModel.BankPaymentDate=$("#BankPaymentDate").val();
            SanctionViewModel.CheqNEFTDD=$("#CheqNEFTDD").val();
            SanctionViewModel.CheqNEFTDDNo=$("#CheqNEFTDDNo").val();
            SanctionViewModel.CheqNEFTDDDate = $("#CheqNEFTDDDate").val();
            SanctionViewModel.BankAmount = $("#BankAmount").val();
            SanctionViewModel.CashAccountNo=$("#CashAccountNo").val();
            SanctionViewModel.CashAmount=$("#CashAmount").val();
            SanctionViewModel.CashOutwardbyNo=$("#CashOutwardbyNo").val();
            SanctionViewModel.GoldInwardByNo = $("#GoldInwardByNo").val();
            SanctionViewModel.RackNo = $("#RackNo").val();
            SanctionViewModel.Remark=$("#Remark").val();
            SanctionViewModel.GoldInwardDate=$("#GoldInwardDate").val();
            SanctionViewModel.StateID = $("#StateID").val();
            SanctionViewModel.SchemeProcessingType = $("#SchemeProcessingType").val();
            SanctionViewModel.SchemeProcessingCharge=$("#SchemeProcessingCharge").val();
            SanctionViewModel.SchemeProcessingLimit=$("#SchemeProcessingLimit").val();
            SanctionViewModel.CGSTAmount = $("#CGSTAmount").val();
            SanctionViewModel.SGSTAmount = $("#SGSTAmount").val();
            SanctionViewModel.CGSTAccountId=$("#CGSTAccountId").val();
            SanctionViewModel.SGSTAccountId=$("#SGSTAccountId").val();
            SanctionViewModel.CGSTTax = $("#CGSTTax").val();
            SanctionViewModel.SGSTTax = $("#SGSTTax").val();
            SanctionViewModel.PreSanctionId = $("#PreSanctionId").val();
            SanctionViewModel.Interest=$("#Interest").text();
            SanctionViewModel.PenalInterest=$("#PenalInterest").text();
            SanctionViewModel.Charges=$("#Charges").text();
            SanctionViewModel.Total=$("#Total").text();
            debugger;
            if(SanctionViewModel.PaymentMode=="Cash")
            {
                if(SanctionViewModel.CashAmount<SanctionViewModel.NetPayable || SanctionViewModel.NetPayable<SanctionViewModel.CashAmount)
                {
                    alert("Cash Amount and Net Payable must be equal");
                    $("#CashAmount").focus();
                    check=false;
                    return;
                }
            }

            if (SanctionViewModel.CustomerId == 0) {
                $("#CustomErr").text("Please Select Customer");
                $("#CustomerID").focus();
                check=false;
                return;
            }
            $("#CustomErr").text("");
            if (SanctionViewModel.SanctionLoanAmount == 0) {
                $("#SanctionErrorMessage").text("Please Enter Sanction Loan Amount");
                $("#SanctionLoanAmount").focus();
                check=false;
                return;
            }
            debugger;
            if(SanctionViewModel.PaymentMode=="")
            {
                $("#PaymentModeErrorMessage").text("Please Select Payment Mode");
                $("#PaymentMode").focus();
                check=false;
                return;
            }
            $("#PaymentModeErrorMessage").text("");
            if(SanctionViewModel.PaymentMode=="Chq/DD/NEFT" || SanctionViewModel.PaymentMode=="Both")
            {
                if(SanctionViewModel.BankAccountNo=="")
                {
                    $("#BankAccountNo").css('border-color','red');
                    $("#BankAccountNo").focus();
                    check=false;
                    return;
                }
                $("#BankAccountNo").css('border-color','');
                if(SanctionViewModel.BankPaymentDate=="")
                {
                    $("#BankPaymentDate").css('border-color','red');
                    $("#BankPaymentDate").focus();
                    check=false;
                    return;
                }
                $("#BankPaymentDate").css('border-color','');
                if(SanctionViewModel.ChqDDNEFT=="")
                {
                    $("#ChqDDNEFT").css('border-color','red');
                    $("#ChqDDNEFT").focus();
                    check=false;
                    return;
                }
                $("#ChqDDNEFT").css('border-color','');
                if(SanctionViewModel.ChqDDNEFT=="Cheque")
                {
                    if(SanctionViewModel.ChqDDNEFTNo=="")
                    {
                        $("#ChqDDNEFTNo").css('border-color','red');
                        $("#ChqDDNEFTNo").focus();
                        check=false;
                        return;
                    }
                    $("#ChqDDNEFTNo").css('border-color','');
                    if(SanctionViewModel.ChqDDNEFTDate=="")
                    {
                        $("#ChqDDNEFTDate").css('border-color','red');
                        $("#ChqDDNEFTDate").focus();
                        check=false;
                        return;
                    }
                    $("#ChqDDNEFTDate").css('border-color','');
                }
                if(SanctionViewModel.BankAmount=="0.00" || SanctionViewModel.BankAmount=="0")
                {
                    $("#BankAmount").css('border-color','red');
                    $("#BankAmount").focus();
                    check=false;
                    return;
                }
                $("#BankAmount").css('border-color','');
            }

            if(SanctionViewModel.PaymentMode=="Cash")
            {
                if(SanctionViewModel.CashAccountNo=="")
                {
                    $("#CashAccountNo").css('border-color','red');
                    $("#CashAccountNo").focus();
                    check=false;
                    return;
                }
                $("#CashAccountNo").css('border-color','');
                if(SanctionViewModel.CashAmount=="0.00" || SanctionViewModel.CashAmount=="0")
                {
                    $("#CashAmount").css('border-color','red');
                    $("#CashAmount").focus();
                    check=false;
                    return;
                }
                $("#CashAmount").css('border-color','');
                if(SanctionViewModel.CashOutwardbyNo=="")
                {
                    $("#CashOutwardbyNo").css('border-color','red');
                    $("#CashOutwardbyNo").focus();
                    check=false;
                    return;
                }
                $("#CashOutwardbyNo").css('border-color','');
            }
            if(SanctionViewModel.GoldInwardByNo=="")
            {
                $("#GoldInwardByNo").css('border-color','red');
                $("#GoldInwardByNo").focus();
                check=false;
                return;
            }
            $("#GoldInwardByNo").css('border-color','');
            if(SanctionViewModel.RackNo=="")
            {
                $("#RackNo").css('border-color','red');
                $("#RackNo").focus();
                check=false;
                return;
            }
            $("#RackNo").css('border-color','');
            if(SanctionViewModel.GoldInwardDate=="")
            {
                $("#GoldInwardDate").css('border-color','red');
                $("#GoldInwardDate").focus();
                check=false;
                return;
            }
            $("#GoldInwardDate").css('border-color','');
            //var inp = document.getElementById('ProofOfOwnerShipFile');
            //if (inp.files.length === 0) {
            //    $("#CustomErr").text("Upload Proof Of OwnerShip Image!");
            //    inp.focus();
            //    return false;
            //}

            //if ($('#tblChargeDetails tbody tr').length == 0) {
            //    var ChargeId= $("#ChargeVM_ChargeId").val();
            //    if (ChargeId == 0) {
            //        $("#CustomErr").text("Please Select Charge");
            //        $("#ChargeVM_ChargeId").focus();
            //        check=false;
            //        return;
            //    }
            //    var AccountId= $("#ChargeVM_AccountId").val();
            //    if (AccountId == 0) {
            //        $("#CustomErr").text("Please Select Account");
            //        $("#ChargeVM_AccountId").focus();
            //        check=false;
            //        return;
            //    }
            //}
            //var length=$('#tblChargeDetails tbody tr').length;
            //if(length==0)
            //{
            //    $("#CustomErr").text("Please Click Add button then save record");
            //    $("#tblChargeDetails").focus();
            //    check=false;
            //    return check;
            //}

            //$("#btn_save").prop("disabled", true);
            var lstChargeTrn = [];
            var lstGoldItemTrn = [];

            $("#tblChargeDetails TBODY TR").each(function () {
                var row = $(this);
                var rowChargeTrn = {};
                debugger;
                rowChargeTrn.ID = row.attr('id');
                rowChargeTrn.ChargeId = row.find("td").eq(1).attr('id');
                rowChargeTrn.CDetailsID = row.find("td").eq(2).attr('id');
                rowChargeTrn.Charges = row.find("TD").eq(2).html();
                rowChargeTrn.ChargeType = row.find("TD").eq(3).html();
                rowChargeTrn.Amount = row.find("TD").eq(4).html();
                rowChargeTrn.AccountId = row.find("td").eq(5).attr('id');
                lstChargeTrn.push(rowChargeTrn);
            });

            $("#tblGoldItemDetails TBODY TR").each(function () {
                var row = $(this);
                var rowGoldItemTrn = {};
                debugger;
                rowGoldItemTrn.ID = row.attr('id');
                rowGoldItemTrn.OrnamentId = row.find("td").eq(1).attr('id');
                rowGoldItemTrn.Qty = row.find("TD").eq(2).html();
                rowGoldItemTrn.PurityNo = row.find("td").eq(3).attr('id');
                rowGoldItemTrn.GrossWeight = row.find("TD").eq(4).html();
                rowGoldItemTrn.Deductions =  row.find("TD").eq(5).html();
                rowGoldItemTrn.RatePerGram =  row.find("TD").eq(6).html();
                rowGoldItemTrn.NetWeight = row.find("TD").eq(7).html();
                rowGoldItemTrn.Value = row.find("TD").eq(8).html();
                lstGoldItemTrn.push(rowGoldItemTrn);
            });

            $("#tblGoldItemDetails tfoot TR").each(function () {
                var row = $(this);
                var rowGoldItemTrn = {};
                SanctionViewModel.TotalQuantity = row.find("TD").eq(2).text();
                SanctionViewModel.TotalGrossWeight = row.find("TD").eq(4).text();
                SanctionViewModel.TotalDeductions = row.find("TD").eq(5).text();
                SanctionViewModel.TotalRatePerGram =  row.find("TD").eq(6).text();
                SanctionViewModel.TotalNetWeight =  row.find("TD").eq(7).text();
                SanctionViewModel.TotalValue =  row.find("TD").eq(8).text();
            });
            debugger;
            SanctionViewModel.ChargeDetailList = lstChargeTrn;
            SanctionViewModel.EligibleLoanAmountValuationDetailsVMList = lstGoldItemTrn;

            SanctionViewModel.ID = $('#ItemID').val();
            if(check==true)
            {
                $.ajax({
                    type: "POST",
                    url: "/SanctionDisbursement/Insert",
                    data: JSON.stringify(SanctionViewModel),
                    contentType: "application/json; charset=utf-8",
                    dataType: "json",
                    success: function (r) {
                        debugger;
                        if (r == 1) {
                            $("#saveModal").modal('show');
                            $(document).click(function () {
                                window.location.href = urlRedirect;
                            });
                        }
                        else if(r==2){
                            $("#saveModal").modal('show');
                            $(document).click(function () {
                                window.location.href = urlRedirect;
                            });
                        }
                        else
                        {   $("#CustomErr").text(r);
                            $("#btn_save").prop("disabled", false);
                            return false;
                        }
                    }
                });
            }
        }
        var urlRedirect = '@Html.Raw(@Url.Action("SanctionDisbursement", "SanctionDisbursement"))';
        function OnSuccess(response) {

            $("#saveModal").modal('show');
            $(document).click(function () {
                window.location.href = urlRedirect;
            });
        }

        function OnFailure(response) {
            alert("Error occured.");
        }

        function ShowEditTableList() {
            $('#divviewfilldata').empty();
            $.ajax({
                type: "POST",
                url: '@Url.Action("GetSanctionTable", "SanctionDisbursement")',
                dataType: "html",
                data: { Operation: "Edit" },
                success: function (data) {
                    $('#divsanctionfilldata').empty();
                    $('#divsanctionfilldata').html(data);
                    $('#example').dataTable();
                },
                error: function (xhr, status, error) {
                    alert(error);
                }
            });
        }

        function ShowViewTableList() {
            $('#diveditfilldata').empty();
            $.ajax({
                type: "POST",
                url: '@Url.Action("GetSanctionTable", "SanctionDisbursement")',
                dataType: "html",
                data: { Operation: "View" },
                success: function (data) {
                    $('#divsanctionfilldata').empty();
                    $('#divsanctionfilldata').html(data);
                    $('#example').dataTable();
                },
                error: function (xhr, status, error) {
                    alert(error);
                }
            });
        }

        function ShowClientTableList() {
            $('#divviewfilldata').empty();
            $.ajax({
                type: "POST",
                url: '@Url.Action("GetCustomerTable", "SanctionDisbursement")',
                dataType: "html",
                data: { Operation: "Edit" },
                success: function (data) {
                    $('#diveditfilldata').empty();
                    $('#diveditfilldata').html(data);
                    $('#example').dataTable();
                },
                error: function (xhr, status, error) {
                    alert(error);
                }
            });
        }

        $("#uploadFile").change(function () {

            var fileUpload = $("#uploadFile").get(0);
            var files = fileUpload.files;
            // Create FormData object
            fileData = new FormData();
            // Looping over all files and add it to FormData object
            for (var i = 0; i < files.length; i++) {
                fileData.append("uploadFile", files[i]);
            }
            $.ajax({
                type: 'POST',
                url: '@Url.Action("UploadProofOfOwnershipImage", "SanctionDisbursement")', // we are calling json method
                contentType: false, // Not to set any content header
                processData: false, // Not to process data
                data: fileData,
                success: function (data) {
                },
                error: function (ex) {
                    alert('Failed to retrieve data.' + ex);
                }
            });
            return false;
        })

        //Dropdownlist Selectedchange event of payment mode
        $("#PaymentMode").change(function () {
            var paymentmode = $("#PaymentMode").val();
            $("#CashAccountNo").attr('disabled','disabled');
            $("#CashAmount").attr('disabled','disabled');
            $("#BankCashAccID").attr('disabled','disabled');
            $("#BankPaymentDate").attr('disabled','disabled');
            $("#CheqNEFTDD").attr('disabled','disabled');
            $("#CheqNEFTDDNo").attr('disabled','disabled');
            $("#CheqNEFTDDDate").attr('disabled','disabled');
            $("#BankAmount").attr('disabled','disabled');

            if (paymentmode == "Chq/DD/NEFT") {
                $("#BankCashAccID").removeAttr('disabled');
                $("#BankPaymentDate").removeAttr('disabled');
                $("#CheqNEFTDD").removeAttr('disabled');
                $("#CheqNEFTDDNo").removeAttr('disabled');
                $("#CheqNEFTDDDate").removeAttr('disabled');
                $("#BankAmount").removeAttr('disabled');
            }
            else if(paymentmode=="Both")
            {
                $("#BankCashAccID").removeAttr('disabled');
                $("#BankPaymentDate").removeAttr('disabled');
                $("#CheqNEFTDD").removeAttr('disabled');
                $("#CheqNEFTDDNo").removeAttr('disabled');
                $("#CheqNEFTDDDate").removeAttr('disabled');
                $("#BankAmount").removeAttr('disabled');
                $("#CashAccountNo").removeAttr('disabled');
                $("#CashAmount").removeAttr('disabled');
            }
            else
            {
                $("#CashAccountNo").removeAttr('disabled');
                $("#CashAmount").removeAttr('disabled');
            }
        });

        //Dropdownlist Selectedchange event
        $("#ChargeVM_ChargeId").change(function () {
            var sanctionamount = $("#SanctionLoanAmount").val();
            if (sanctionamount == 0) {
                alert('Please Enter Sanction Loan Amount')
                $("#SanctionLoanAmount").focus()
                $("#ChargeVM_ChargeId").val("");
                return;
            }
            if ($("#ChargeVM_ChargeId").val() > 0) {
                $.ajax({
                    type: 'POST',
                    url: '@Url.Action("GetChargeDetails", "SanctionDisbursement")', // we are calling json method
                    dataType: 'json',
                    data: { ChargeId: $("#ChargeVM_ChargeId").val(), SanctionLoanAmount: sanctionamount,SchemeProcessingType:$("#SchemeProcessingType").val(), SchemeProcessingCharge:$("#SchemeProcessingCharge").val() },
                    //as inputto json method GetStatesfr
                    success: function (data) {
                        if(data.ID>0)
                        {
                            $("#ChargeVM_CDetailsID").val(data.CDetailsID);
                            $("#ChargeVM_Charges").val(data.Charges);
                            $("#ChargeVM_ChargeType").val(data.ChargeType);
                            $("#ChargeVM_Amount").val(data.Amount);
                        }
                        else
                        {
                            alert('Can not apply charge for selected Sanction Loan Amount');
                            return;
                        }
                    },
                    error: function (ex) {
                        alert('Failed to retrieve data.' + ex);
                    }
                });
                return false;
            }
            else {
                alert('Please Select Proper Charge')
                $("#ChargeVM_ChargeId").focus();
                return;
            }
        })

        var sr_no = 0;
        var trid = 0;
        currentRow = null;
        $("#btnAddChargeDetails").click(function () {
            $("#CustomErrr").text("");
            $('[data-toggle="tooltip"]').tooltip();
            var actions = "<a class=\"edit\"><i class=\"fa fa-edit\" title='Edit'></i></a>&nbsp;&nbsp;&nbsp;&nbsp;<a class=\"delete\"><i class=\"fa fa-trash\" title='Delete'></i></a>"
            var index = $("#tblChargeDetails tbody tr:last").index();
            var ChargeId = $("#ChargeVM_ChargeId").val();
            var ChargeDetailsId = $("#ChargeVM_CDetailsID").val();
            var ChargeName = $("#ChargeVM_ChargeId option:selected").text();
            var Charges = $("#ChargeVM_Charges").val();
            var ChargeType = $("#ChargeVM_ChargeType").val();
            var Amount = $("#ChargeVM_Amount").val();
            var AccountId = $("#ChargeVM_AccountId").val();
            var AccountName = $("#ChargeVM_AccountId option:selected").text();

            if (ChargeId == 0) {
                alert('Please Select Charge')
                $("#ChargeVM_ChargeId").focus();
                return;
            }

            if (AccountId == 0) {
                alert('Please Select Account')
                $("#ChargeVM_AccountId").focus();
                return;
            }

            var srno = 0;
            var newtrno = trid;
            if (sr_no == 0) {
                srno = index + 2;
                newtrno = 0;
            }
            else {
                srno = sr_no;
                //var no = parseInt(srno) - 1;
                //$("#tblChargeDetails tbody tr:eq(" + no + ")").remove();
            }
            sr_no = 0;
            trid = 0;
            var row = '<tr id=' + srno + '>' +
                '<td width="10%">' + srno + '</td>' +
                '<td width="30%" id="' + ChargeId + '">' + ChargeName + '</td>' +
                '<td width="10%" id="'+ChargeDetailsId+'">' + Charges + '</td>' +
                '<td width="10%">' + ChargeType + '</td>' +
                '<td width="10%">' + Amount + '</td>' +
                '<td width="30%" id="' + AccountId + '">' + AccountName + '</td>' +
                '<td '+ actions + '</td>' +
                '</tr>';
            var isExist = false;
            if (ChargeId != "" && AccountId != "") {
                $("#tblChargeDetails TBODY tr").each(function() {
                    // get row
                    var row = $(this);
                    // get first and second td
                    if(currentRow==null)
                    {
                        var first = row.find('td:nth-child(2)').attr('id');
                        // if exists, remove the tr
                        if (first == ChargeId) {
                            isExist = true;
                        }
                    }
                });
                if(isExist)
                {
                    alert("The same Charge already Exist");
                    return false;
                }
                else
                {
                    if(currentRow){
                        $("#tblChargeDetails tbody").find($(currentRow)).replaceWith(row);
                        debugger;
                        //ID which want to compare
                        var id = currentRow.attr('id');
                        var first = 0;
                        var amount = 0;
                        $('#divChargeDetails tbody>tr').each(function () {
                            var row1 = $(this).closest("tr");
                            if (id == $(this).attr('id')) {
                                if (first == 0) {
                                    amount = row1.find("td:eq(4)").text();
                                    var oldchgamt=currentRow.find("td:eq(4)").text();
                                    var netpayable =parseFloat($("#NetPayable").val());
                                    $("#NetPayable").val(netpayable+parseFloat(oldchgamt));
                                }
                                else {
                                    var percentValue = row1.find("td:eq(2)").text();
                                    var per = (amount * percentValue) / 100;
                                    row1.find("td:eq(4)").text(per);
                                    $("#CGSTAmount").val(per);
                                    $("#SGSTAmount").val(per);
                                }
                                first = first + 1;
                            }
                        });
                        debugger;
                        var totamt=0;
                        $('#divChargeDetails tbody>tr').each(function () {
                            var row = $(this).closest("tr");
                            totamt=totamt+parseFloat(row.find('td:eq(4)').html());
                        });
                        var SanctionLoanAmount = parseFloat($("#SanctionLoanAmount").val());
                        var netpayable = parseFloat($("#NetPayable").val());
                        $("#NetPayable").val(parseFloat(SanctionLoanAmount)-(parseFloat(totamt)));

                        $("#ChargeVM_ChargeId").val("");
                        $("#ChargeVM_Charges").val("");
                        $("#ChargeVM_ChargeType").val("");
                        $("#ChargeVM_Amount").val("");
                        $("#ChargeVM_AccountId").val("");
                        currentRow = null;
                        $("#tblChargeDetails TBODY TR").on("click", ".edit", function () {
                            debugger;
                            var tr = $(this).closest('tr');
                            currentRow= $(this).parents('tr');
                            sr_no = tr.find('td:eq(0)').html();
                            trid =tr.attr('id'); // table row ID
                            var ChargeId =tr.find("td").eq(1).attr('id');
                            var ChargeName =  tr.find('td:eq(1)').html();
                            var Charges =  tr.find('td:eq(2)').html();
                            var ChargeType = tr.find('td:eq(3)').html();
                            var Amount = tr.find('td:eq(4)').html();
                            var AccountId =tr.find("td").eq(5).attr('id');
                            var AccountName =tr.find('td:eq(5)').html();

                            $("#ChargeVM_ChargeId").val(ChargeId);
                            $("#ChargeVM_Charges").val(Charges);
                            $("#ChargeVM_ChargeType").val(ChargeType);
                            $("#ChargeVM_Amount").val(Amount);
                            $("#ChargeVM_AccountId").val(AccountId);
                        })
                        $("#tblChargeDetails tbody tr").on("click", ".delete", function () {
                            if (confirm('Are you sure to remove?')) {
                                debugger;
                                var row1 = $(this).closest("tr");
                                $('#divChargeDetails tbody>tr').each(function () {
                                    if (row1.attr('id') == $(this).attr('id')) {
                                        $(this).closest('tr').remove();
                                    }
                                });
                                var totamt=0;
                                $('#divChargeDetails tbody>tr').each(function () {
                                    var row = $(this).closest("tr");
                                    totamt=totamt+parseFloat(row.find('td:eq(4)').html());
                                });
                                //var gstamount=parseFloat($("#CGSTAmount").val())+parseFloat($("#SGSTAmount").val());
                                var SanctionLoanAmount = parseFloat($("#SanctionLoanAmount").val());
                                //Amount=parseFloat(Amount);
                                //$("#NetPayable").val(netpayable + (Amount+gstamount));
                                $("#NetPayable").val(parseFloat(SanctionLoanAmount)-(parseFloat(totamt)));
                                $("#ChargeVM_ChargeId").val("");
                                $("#ChargeVM_Charges").val("");
                                $("#ChargeVM_ChargeType").val("");
                                $("#ChargeVM_Amount").val("");
                                $("#ChargeVM_AccountId").val("");
                                return false;
                            }
                        })
                    }
                    else
                    {
                        fileData = new FormData();
                        fileData.append('Id', srno);
                        fileData.append('CDetailsID', ChargeDetailsId);
                        fileData.append('ChargeId', ChargeId);
                        fileData.append('ChargeName', ChargeName);
                        fileData.append('Charges', Charges);
                        fileData.append('Amount', Amount);
                        fileData.append('AccountId', AccountId);
                        fileData.append('AccountName', AccountName);
                        fileData.append('ChargeType', ChargeType);
                        fileData.append('StateID', $("#StateID").val());
                        $.ajax({
                            url: '/SanctionDisbursement/AddChargeDetails',
                            type: "POST",
                            contentType: false, // Not to set any content header
                            processData: false, // Not to process data
                            data: fileData,
                            success: function (result) {
                                debugger;
                                $.each(result.ChargeDetailList, function (key, val) {
                                    if(val.CDetailsID==0)
                                    {
                                        actions='';
                                        $("#CGSTAmount").val(val.Amount);
                                        $("#SGSTAmount").val(val.Amount);
                                    }
                                    var rowCount = $('#tblChargeDetails >tbody >tr').length + 1;
                                    $('#tblChargeDetails tbody').append('<tr id=' + val.ID + '><td width="10%">' + rowCount +
                                     '<td width="20%" id="' + val.ChargeId + '">' + val.ChargeName + '</td>' +
                                     '<td width="10%" id="' + val.CDetailsID + '">' + val.Charges + '</td>' +
                                     '<td width="10%">' + val.ChargeType + '</td>' +
                                     '<td width="10%">' + val.Amount + '</td>' +
                                     '<td width="10%" id="' + val.AccountId + '">' + val.AccountName + '</td>' +
                                     '<td  '+ actions + '</td>' +
                                     '</tr>');
                                });
                                var totamt=0;
                                $('#divChargeDetails tbody>tr').each(function () {
                                    var row = $(this).closest("tr");
                                    totamt=totamt+parseFloat(row.find('td:eq(4)').html());
                                });
                                //var gstamount=parseFloat($("#CGSTAmount").val())+parseFloat($("#SGSTAmount").val());
                                var SanctionLoanAmount = parseFloat($("#SanctionLoanAmount").val());
                                //Amount=parseFloat(Amount);
                                //$("#NetPayable").val(netpayable + (Amount+gstamount));
                                $("#NetPayable").val(parseFloat(SanctionLoanAmount)-(parseFloat(totamt)));
                                $("#tblChargeDetails TBODY TR").on("click", ".edit", function () {
                                    debugger;
                                    var tr = $(this).closest('tr');
                                    currentRow= $(this).parents('tr');
                                    sr_no = tr.find('td:eq(0)').html();
                                    trid =tr.attr('id'); // table row ID
                                    var ChargeId =tr.find("td").eq(1).attr('id');
                                    var ChargeName =  tr.find('td:eq(1)').html();
                                    var Charges =  tr.find('td:eq(2)').html();
                                    var ChargeType = tr.find('td:eq(3)').html();
                                    var Amount = tr.find('td:eq(4)').html();
                                    var AccountId =tr.find("td").eq(5).attr('id');
                                    var AccountName =tr.find('td:eq(5)').html();

                                    $("#ChargeVM_ChargeId").val(ChargeId);
                                    $("#ChargeVM_Charges").val(Charges);
                                    $("#ChargeVM_ChargeType").val(ChargeType);
                                    $("#ChargeVM_Amount").val(Amount);
                                    $("#ChargeVM_AccountId").val(AccountId);
                                })
                                $("#tblChargeDetails tbody tr").on("click", ".delete", function () {
                                    if (confirm('Are you sure to remove?')) {
                                        debugger;
                                        var row = $(this).closest("tr");
                                        $('#divChargeDetails tbody>tr').each(function () {
                                            var row1 = $(this).closest("tr");
                                            if (row.attr('id') == $(this).attr('id')) {
                                                $(this).closest('tr').remove();
                                            }
                                        });
                                        var totamt=0;
                                        $('#divChargeDetails tbody>tr').each(function () {
                                            var row = $(this).closest("tr");
                                            totamt=totamt+parseFloat(row.find('td:eq(4)').html());
                                        });
                                        //var gstamount=parseFloat($("#CGSTAmount").val())+parseFloat($("#SGSTAmount").val());
                                        var netpayable = parseFloat($("#NetPayable").val());
                                        //Amount=parseFloat(Amount);
                                        //$("#NetPayable").val(netpayable + (Amount+gstamount));
                                        $("#NetPayable").val(netpayable +totamt);
                                        $("#ChargeVM_ChargeId").val("");
                                        $("#ChargeVM_Charges").val("");
                                        $("#ChargeVM_ChargeType").val("");
                                        $("#ChargeVM_Amount").val("");
                                        $("#ChargeVM_AccountId").val("");
                                        return false;
                                    }
                                })
                            },
                            error: function (err) {
                                //alert(err.statusText);
                            }
                        });
                    }
                    //get sanction loan amount
                    //net payable = sanction-(charge+GST)
                    debugger;
                    $("#ChargeVM_ChargeId").val("");
                    $("#ChargeVM_Charges").val("");
                    $("#ChargeVM_ChargeType").val("");
                    $("#ChargeVM_Amount").val("");
                    $("#ChargeVM_AccountId").val("");
                    $("#divChargeDetails").show();
                }
            }
        });

        $("#diveditfilldata").on("click", "tr", function () {
            debugger;
            var tr = $(this).closest('tr');
            var PresanctionId = tr.find("td").eq(1).attr('id');
            $("#editModal").hide();
            SetKycDetails(PresanctionId);
        })

        function SetKycDetails(PresanctionId) {
            debugger;
            $.ajax({
                type: "POST",
                url: '@Url.Action("GetKycDetails", "SanctionDisbursement")',
                data: "{Id: " + PresanctionId + "}",
                contentType: "application/json; charset=utf-8",
                dataType: "json",
                success: function (result) {
                    debugger;
                    $("#CustomErr").text("");
                    $("#tblGoldItemDetails tbody tr").empty();
                    $("#tblGoldItemDetails tfoot tr").empty();
                    $("#tblChargeDetails tbody tr").empty();
                    $("#divChargeDetails").show();
                    $.each(result, function (key, value) {
                        if (key == "AppliedDate") {
                            value = new Date(parseInt(value.replace('/Date(', '')));
                            var day = value.getDate();
                            var month = value.getMonth() + 1;
                            var year = value.getFullYear();
                            value = day + "/" + month + "/" + year;
                        }
                        $("#" + key + "").val(value);
                    });
                    debugger;
                    $("#Principal").text(result.Principal);
                    $("#Interest").text(result.Interest);
                    $("#PenalInterest").text(result.PenalInterest);
                    $("#Charges").text(result.Charges);
                    $("#Total").text(result.Total);
                    $("#SanctionLoanAmount").val($("#EligibleLoanAmount").val());
                    $("#NetPayable").val($("#EligibleLoanAmount").val()-$("#DiscountAmount").val());
                    //var actions = "<a class=\"delete\"><i class=\"fa fa-trash\" title='Delete'></i></a>";
                    $.each(result.ChargeDetailList, function (key, val) {
                        var rowCount = $('#tblChargeDetails >tbody >tr').length + 1;
                        var value = "";
                        $('#tblChargeDetails tbody').append('<tr id=' + val.ID + '><td width="10%">' + rowCount +
                         '<td width="20%" id="' + val.ChargeId + '">' + val.ChargeName + '</td>' +
                         '<td width="10%" id="' + val.CDetailsID + '">' + val.Charges + '</td>' +
                           '<td width="10%">' + val.ChargeType + '</td>' +
                           '<td width="10%">' + val.Amount + '</td>' +
                           '<td width="10%" id="' + val.AccountId + '">' + val.AccountName + '</td>' +
                           '<td id=' + val.ID + '' +  + '</td>' +
                           '</tr>');
                    });
                    $.each(result.EligibleLoanAmountValuationDetailsVMList, function (key, val) {
                        var rowCount = $('#tblGoldItemDetails >tbody >tr').length + 1;
                        var value = "";
                        $('#tblGoldItemDetails tbody').append('<tr id=' + val.ID + '><td width="10%">' + rowCount +
                         '<td width="20%" id="' + val.OrnamentId + '">' + val.OrnamentName + '</td>' +
                         '<td width="10%">' + val.Qty + '</td>' +
                           '<td width="10%" id="' + val.PurityNo + '">' + val.PurityName + '</td>' +
                           '<td width="10%">' + val.GrossWeight + '</td>' +
                           '<td width="10%">' + val.Deductions + '</td>' +
                           '<td width="10%">' + val.RatePerGram + '</td>' +
                           '<td width="10%">' + val.NetWeight + '</td>' +
                           '<td width="10%">' + val.Value + '</td>' +
                           '</tr>');
                    });
                    var foot = $("#tblGoldItemDetails").find('tfoot');
                    if (!foot.length) foot = $('<tfoot>').appendTo("#tblGoldItemDetails");
                    foot.append($('<tr><td><b>Total</b></td><td></td><td><b>' + result.TotalQuantity + '</b></td><td></td>' +
                                                            '<td><b>' + result.TotalGrossWeight + '</b></td>' +
                                                            '<td><b>' + result.TotalDeductions + '</b></td>' +
                                                            '<td><b>' + result.TotalRatePerGram + '</b></td>' +
                                                            '<td><b>' + result.TotalNetWeight + '</b></td>'+
                                                            '<td><b>' + result.TotalValue + '</b></td></tr>'));
                }
            });
        }

        $("#divsanctionfilldata").on("click", "tr", function () {
            var tr = $(this).closest('tr');
            var Id = tr.find("td").eq(0).attr('id');
            $("#editSanctionModal").hide();
            SetSanctionDisbursementDetails(Id);
        })

        function SetSanctionDisbursementDetails(id) {
            debugger;
            $.ajax({
                type: "POST",
                url: '@Url.Action("GetSanctionDisbursementDetails", "SanctionDisbursement")',
                data: "{Id: " + id + "}",
                contentType: "application/json; charset=utf-8",
                dataType: "json",
                success: function (result) {
                    debugger;
                    $("#divChargeDetails").show();
                    $("#tblChargeDetails tbody tr").empty();
                    $("#tblGoldItemDetails tbody tr").empty();
                    $("#tblGoldItemDetails tfoot tr").empty();
                    $.each(result, function (key, value) {
                        $("#" + key + "").val(value);
                    });
                    $("#Principal").text(result.Principal);
                    $("#Interest").text(result.Interest);
                    $("#PenalInterest").text(result.PenalInterest);
                    $("#Charges").text(result.Charges);
                    $("#Total").text(result.Total);
                    $("#ItemID").val(result.ID);

                    if (result.ProofOfOwnerShipImageFile != null) {
                        $("#ProofPhoto").append('<td><a href="/SanctionDisbursement/Download/' + result.ID + '" target=_blank>Show Ownership Photo</a></td>');
                    }

                    if ($("#ItemID").val() >0) {
                        $("#CashAccountNo").removeAttr('disabled');
                        $("#CashAmount").removeAttr('disabled');
                        $("#BankCashAccID").removeAttr('disabled');
                        $("#BankPaymentDate").removeAttr('disabled');
                        $("#CheqNEFTDD").removeAttr('disabled');
                        $("#CheqNEFTDDNo").removeAttr('disabled');
                        $("#CheqNEFTDDDate").removeAttr('disabled');
                        $("#BankAmount").removeAttr('disabled');
                    }
                    var actions = "<a class=\"edit\"><i class=\"fa fa-edit\" title='Edit'></i></a>&nbsp;&nbsp;&nbsp;&nbsp;<a class=\"delete\"><i class=\"fa fa-trash\" title='Delete'></i></a>"

                    $.each(result.ChargeDetailList, function (key, val) {
                        var rowCount = $('#tblChargeDetails >tbody >tr').length + 1;
                        if(val.ChargeId==0)
                        {
                            actions='';
                            $("#CGSTAmount").val(val.Amount);
                            $("#SGSTAmount").val(val.Amount);
                        }
                        $('#tblChargeDetails tbody').append('<tr id=' + val.ID + '><td width="10%">' + rowCount +
                           '<td width="20%" id="' + val.ChargeId + '">' + val.ChargeName + '</td>' +
                           '<td width="10%" id="' + val.CDetailsID + '">' + val.Charges + '</td>' +
                           '<td width="10%">' + val.ChargeType + '</td>' +
                           '<td width="10%">' + val.Amount + '</td>' +
                           '<td width="10%" id="' + val.AccountId + '">' + val.AccountName + '</td>' +
                           '<td ' + actions + '</td>' +
                           '</tr>');
                    });

                    $("#tblChargeDetails TBODY TR").on("click", ".edit", function () {
                        debugger;
                        var tr = $(this).closest('tr');
                        currentRow= $(this).parents('tr');
                        sr_no = tr.find('td:eq(0)').html();
                        trid =tr.attr('id'); // table row ID
                        var ChargeId =tr.find("td").eq(1).attr('id');
                        var ChargeName =  tr.find('td:eq(1)').html();
                        var Charges =  tr.find('td:eq(2)').html();
                        var ChargeType = tr.find('td:eq(3)').html();
                        var Amount = tr.find('td:eq(4)').html();
                        var AccountId =tr.find("td").eq(5).attr('id');
                        var AccountName =tr.find('td:eq(5)').html();

                        $("#ChargeVM_ChargeId").val(ChargeId);
                        $("#ChargeVM_Charges").val(Charges);
                        $("#ChargeVM_ChargeType").val(ChargeType);
                        $("#ChargeVM_Amount").val(Amount);
                        $("#ChargeVM_AccountId").val(AccountId);
                    })

                    $("#tblChargeDetails tbody tr").on("click", ".delete", function () {
                        if (confirm('Are you sure to remove?')) {
                            debugger;
                            var row = $(this).closest("tr");
                            $('#divChargeDetails tbody>tr').each(function () {
                                //var row1 = $(this).closest("tr");
                                if (row.attr('id') == $(this).attr('id')) {
                                    $(this).closest('tr').remove();
                                }
                            });

                            var totamt=0;
                            $('#divChargeDetails tbody>tr').each(function () {
                                var row = $(this).closest("tr");
                                totamt=totamt+parseFloat(row.find('td:eq(4)').html());
                            });
                            var SanctionLoanAmount = parseFloat($("#SanctionLoanAmount").val());
                            var netpayable = parseFloat($("#NetPayable").val());
                            $("#NetPayable").val(parseFloat(SanctionLoanAmount)-(parseFloat(totamt)));
                            $("#ChargeVM_ChargeId").val("");
                            $("#ChargeVM_Charges").val("");
                            $("#ChargeVM_ChargeType").val("");
                            $("#ChargeVM_Amount").val("");
                            $("#ChargeVM_AccountId").val("");
                            return false;
                        }
                    })

                    $.each(result.EligibleLoanAmountValuationDetailsVMList, function (key, val) {
                        var rowCount = $('#tblGoldItemDetails >tbody >tr').length + 1;
                        var value = "";
                        $('#tblGoldItemDetails tbody').append('<tr id=' + val.ID + '><td width="10%">' + rowCount +
                         '<td width="20%" id="' + val.OrnamentId + '">' + val.OrnamentName + '</td>' +
                         '<td width="10%">' + val.Qty + '</td>' +
                           '<td width="10%" id="' + val.PurityNo + '">' + val.PurityName + '</td>' +
                           '<td width="10%">' + val.GrossWeight + '</td>' +
                           '<td width="10%">' + val.Deductions + '</td>' +
                           '<td width="10%">' + val.RatePerGram + '</td>' +
                           '<td width="10%">' + val.NetWeight + '</td>' +
                           '<td width="10%">' + val.Value + '</td>' +
                           '</tr>');
                    });
                    var foot = $("#tblGoldItemDetails").find('tfoot');
                    if (!foot.length) foot = $('<tfoot>').appendTo("#tblGoldItemDetails");
                    foot.append($('<tr><td><b>Total</b></td><td></td><td><b>' + result.TotalQuantity + '</b></td><td></td>' +
                                                            '<td><b>' + result.TotalGrossWeight + '</b></td>' +
                                                            '<td><b>' + result.TotalDeductions + '</b></td>' +
                                                            '<td><b>' + result.TotalRatePerGram + '</b></td>' +
                                                            '<td><b>' + result.TotalNetWeight + '</b></td>'+
                                                            '<td><b>' + result.TotalValue + '</b></td></tr>'));
                }
            });
        }

        $(function () {
            var url = '@Html.Raw(@Url.Action("Delete", "SanctionDisbursement"))';
            $("#btnDelete").click(function () {
                $("#deleteModal").modal('show');
            });
            $("#btnDeleteConfirm").click(function () {
                $.ajax({
                    type: "POST",
                    url: url,
                    data: '{id: "' + $("#ItemID").val() + '" }',
                    contentType: "application/json; charset=utf-8",
                    dataType: "json",
                    success: function (data) {
                        if (data != "") {
                            $("#CustomErr").text(data);
                            return false;
                        }
                        else {
                            $("#CustomErr").empty();
                            $("#DeleteSuccessModal").modal('show');

                            $(document).click(function () {
                                window.location.href = urlRedirect;
                            });
                        }
                    },
                    error: function (xhr, status, error) {
                        alert(error);
                    }
                });
            });
        });
    </script>
}


@model MangalWeb.Model.Transaction.ResidenceVerificationVM
@{
    ViewBag.Title = "ResidenceVerificationVerification";
    Layout = "~/Views/Shared/_Layout.cshtml";

    var kycid = Request.Params["id"];
}
@Styles.Render("~/Content/dataTablescss")
@using (Ajax.BeginForm("Insert", "ResidenceVerification", new AjaxOptions { OnSuccess = "OnSuccess", OnFailure = "OnFailure",OnBegin="StartValidation" }))
{
    @Html.AntiForgeryToken()
    @Html.HiddenFor(x => x.PreSanctionId)
    @Html.Hidden("kycid", kycid);
    <header id="topbar" class="affix">
        <div class="col-md-5 col-sm-4 col-xs-12">
            <div class="topbar-left">
                <h4>Residence Verification Form</h4>
            </div><!--end of topbar-left-->
        </div><!--end of col-md-5-->
        <div class="col-md-7 col-sm-8 col-xs-12">
            <div class="topbar-right" id="headerbutton" @TempData["headerbutton"]>
                <button type="submit" id="btn_save" class="@TempData["btn_saveclass"]"><span class="fa fa-save pr5"></span> <span class="hidden-xs">Save</span></button>
                <a href="@Html.Raw(@Url.Action("Index", "ResidenceVerification"))" type="button" data-toggle="modal" class="btn btn-alert btn-md light fw600 ml10" title="Cancel" alt="Cancel"><span class="fa fa-close pr5"></span><span class="hidden-xs">Cancel</span></a>
            </div><!--end of topbar-right-->
        </div><!--end of col-md-7-->

    </header>
    <!-- Begin: Content -->
    <section id="content" class="animated fadeIn content_height">
        <!-- Dashboard Tiles -->
        <div class="row">
            <div class="col-md-12">
                <div class="panel panel1 panel-primary">
                    <div class="admin-form">
                        <div class="panel-body">
                            <div class="section row mbn">
                                <div class="form-horizontal">
                                    <div class="col-md-12 col-lg-12 col-sm-12 col-xs-12">
                                        <div class="form-group">
                                            <label class="col-lg-2 col-md-2 col-sm-3 col-xs-12 control-label">Transaction Id<span class="text-danger"></span></label>
                                            <div class="col-lg-4 col-md-4 col-sm-4 col-xs-12">
                                                <span class="text-danger" id="CustomErr"> </span>
                                                @Html.EditorFor(model => model.TransactionId, new { htmlAttributes = new { @class = "form-control", @placeholder = "Transaction Id", @readonly = true } })
                                            </div>
                                            <label class="col-lg-2 col-md-2 col-sm-3 col-xs-12 control-label">Date<span class="text-danger"> * </span></label>
                                            <div class="col-lg-4 col-md-4 col-sm-3 col-xs-12">
                                                @Html.EditorFor(model => model.AppliedDate, new { htmlAttributes = new { @class = "form-control", @placeholder = "Applied Date", @autocomplete = "Off" } })
                                                @Html.ValidationMessageFor(model => model.AppliedDate, "", new { @class = "text-danger" })
                                            </div>
                                        </div>
                                    </div>
                                    <div class="col-md-12 col-lg-12 col-sm-12 col-xs-12">
                                        <div class="form-group">
                                            <label class="col-lg-2 col-md-2 col-sm-3 col-xs-12 control-label">Customer Id<span class="text-danger"> * </span></label>
                                            <div class="col-lg-4 col-md-4 col-sm-4 col-xs-12">
                                                @Html.EditorFor(model => model.CustomerId, new { htmlAttributes = new { @class = "form-control", @placeholder = "Customer Id", @autofocus = "autofocus", @readonly = true, @style = "display:inline;width:280px;" } })
                                                <div class="input-group-btn" style="display:inline;">
                                                    <button type="button" data-toggle="modal" data-target="#editModal" onclick="ShowClientTableList();" class="btn btn-info btn_info1">...</button>
                                                </div>
                                                @Html.ValidationMessageFor(model => model.CustomerId, "", new { @class = "text-danger" })
                                            </div>
                                            <label class="col-lg-2 col-md-2 col-sm-3 col-xs-12 control-label">Application No<span class="text-danger"></span></label>
                                            <div class="col-lg-4 col-md-4 col-sm-4 col-xs-12">
                                                @Html.EditorFor(model => model.ApplicationNo, new { htmlAttributes = new { @class = "form-control", @placeholder = "Application No", @readonly = true } })
                                                @Html.ValidationMessageFor(model => model.ApplicationNo, "", new { @class = "text-danger" })
                                            </div>
                                        </div>
                                    </div>

                                    <div class="col-md-12 col-lg-12 col-sm-12 col-xs-12">
                                        <div class="form-group">
                                            <label class="col-lg-2 col-md-2 col-sm-3 col-xs-12 control-label">
                                                Date of Visit
                                                <span class="text-danger">*</span>
                                            </label>
                                            <div class="col-lg-4 col-md-4 col-sm-4 col-xs-12">
                                                <span class="text-danger" id="CustomErr"> </span>
                                                @Html.EditorFor(model => model.DateofVisit, new { htmlAttributes = new { @class = "form-control", @placeholder = "Date of Visit", @autocomplete = "Off" } })

                                                @Html.ValidationMessageFor(model => model.DateofVisit, "", new { @class = "text-danger" })
                                            </div>
                                            <label class="col-lg-2 col-md-2 col-sm-3 col-xs-12 control-label">Time of Visit<span class="text-danger"> * </span></label>
                                            <div class="col-lg-4 col-md-4 col-sm-3 col-xs-12">
                                                @Html.EditorFor(model => model.TimeofVisit, new { htmlAttributes = new { @class = "form-control", @placeholder = "Time of Visit", @autocomplete = "Off" } })

                                                @Html.ValidationMessageFor(model => model.TimeofVisit, "", new { @class = "text-danger" })
                                            </div>
                                        </div>
                                    </div>


                                    <div class="col-md-12 col-lg-12 col-sm-12 col-xs-12">
                                        <div class="form-group">
                                            <label class="col-lg-2 col-md-2 col-sm-3 col-xs-12 control-label">
                                                Person Visited Name
                                                <span class="text-danger">*</span>
                                            </label>
                                            <div class="col-lg-4 col-md-4 col-sm-4 col-xs-12">
                                                <span class="text-danger" id="CustomErr"> </span>
                                                @Html.EditorFor(model => model.PersonVisitedName, new { htmlAttributes = new { @class = "form-control", @placeholder = "Person Visited Name", @autocomplete = "Off", @maxlength = "20" } })
                                                @Html.ValidationMessageFor(model => model.PersonVisitedName, "", new { @class = "text-danger"})
                                            </div>
                                            <label class="col-lg-2 col-md-2 col-sm-3 col-xs-12 control-label">
                                                Relation With Customer
                                                <span class="text-danger"> * </span>
                                            </label>
                                            <div class="col-lg-4 col-md-4 col-sm-3 col-xs-12">
                                                @Html.EditorFor(model => model.RelationWithCustomer, new { htmlAttributes = new { @class = "form-control", @placeholder = "Relation With Customer", @autocomplete = "Off",@maxlength="20" } })
                                                @Html.ValidationMessageFor(model => model.RelationWithCustomer, "", new { @class = "text-danger" })
                                            </div>
                                        </div>
                                    </div>

                                    <div class="col-md-12 col-lg-12 col-sm-12 col-xs-12">
                                        <div class="form-group">
                                            <label class="col-lg-2 col-md-2 col-sm-3 col-xs-12 control-label">
                                                Family Member Details
                                                <span class="text-danger">*</span>
                                            </label>
                                            <div class="col-lg-4 col-md-4 col-sm-4 col-xs-12">
                                                <span class="text-danger" id="CustomErr"> </span>
                                                @Html.DropDownListFor(model => model.FamilyMemberDetails,
 new List<SelectListItem> {

 new SelectListItem { Value = "" , Text = "Select Family Member Details" },
 new SelectListItem { Value = "Dependants" , Text = "Dependants" },
 new SelectListItem { Value = "Independants" , Text = "Independants" }
 },
 new { @class = "form-control" })
                                                @Html.ValidationMessageFor(model => model.FamilyMemberDetails, "", new { @class = "text-danger" })
                                            </div>

                                        </div>
                                    </div>
                                    <hr style="border: 1px solid #DDD;margin-bottom: 20px;">
                                    <label style="padding-left:20px;"><b>Address Details 1(Present Address)</b></label>
                                    <div class="col-md-12 col-lg-12 col-sm-12 col-xs-12" style="margin-top:15px;">
                                        <div class="form-group">
                                            <label class="col-lg-2 col-md-2 col-sm-2 col-xs-12 control-label">
                                                Building/House Name
                                                <span class="text-danger"> * </span>
                                            </label>
                                            <div class="col-lg-4 col-md-4 col-sm-4 col-xs-12">
                                                <span class="text-danger" id="CustomErr"> </span>
                                                @Html.EditorFor(model => model.BldgHouseName, new { htmlAttributes = new { @class = "form-control", @placeholder = "Building/House Name", @maxlength = "20" } })
                                                @Html.ValidationMessageFor(model => model.BldgHouseName, "", new { @class = "text-danger" })
                                            </div>
                                            <label class="col-lg-2 col-md-2 col-sm-2 col-xs-12 control-label">
                                                Road
                                                <span class="text-danger"> * </span>
                                            </label>
                                            <div class="col-lg-4 col-md-4 col-sm-4 col-xs-12">
                                                <span class="text-danger" id="CustomErr"> </span> @Html.EditorFor(model => model.Road, new { htmlAttributes = new { @class = "form-control", @placeholder = "Road", @maxlength = "20" } })
                                                @Html.ValidationMessageFor(model => model.Road, "", new { @class = "text-danger" })
                                            </div>
                                        </div>
                                    </div>
                                    <div class="col-md-12 col-lg-12 col-sm-12 col-xs-12">
                                        <div class="form-group">
                                            <label class="col-lg-2 col-md-2 col-sm-2 col-xs-12 control-label">
                                                Building/ Plot No
                                                <span class="text-danger"> * </span>
                                            </label>
                                            <div class="col-lg-4 col-md-4 col-sm-4 col-xs-12">
                                                <span class="text-danger" id="CustomErr"> </span>
                                                @Html.EditorFor(model => model.BldgPlotNo, new { htmlAttributes = new { @class = "form-control", @placeholder = " Building/ Plot No", @maxlength = "20" } })
                                                @Html.ValidationMessageFor(model => model.BldgPlotNo, "", new { @class = "text-danger" })
                                            </div>
                                            <label class="col-lg-2 col-md-2 col-sm-2 col-xs-12 control-label">
                                                Room/Block No
                                                <span class="text-danger"> * </span>
                                            </label>
                                            <div class="col-lg-4 col-md-4 col-sm-4 col-xs-12">
                                                <span class="text-danger" id="CustomErr"> </span> @Html.EditorFor(model => model.RoomBlockNo, new { htmlAttributes = new { @class = "form-control", @placeholder = "Room/Block No", @maxlength = "20" } })
                                                @Html.ValidationMessageFor(model => model.RoomBlockNo, "", new { @class = "text-danger" })
                                            </div>
                                        </div>
                                    </div>
                                    <div class="col-md-12 col-lg-12 col-sm-12 col-xs-12">
                                        <div class="form-group">
                                            <label class="col-lg-2 col-md-2 col-sm-2 col-xs-12 control-label">
                                                Nearest landmark
                                                <span class="text-danger"> * </span>
                                            </label>
                                            <div class="col-lg-4 col-md-4 col-sm-4 col-xs-12">
                                                <span class="text-danger" id="CustomErr"> </span>
                                                @Html.EditorFor(model => model.Landmark, new { htmlAttributes = new { @class = "form-control", @placeholder = "Landmark", @maxlength = "20" } })
                                                @Html.ValidationMessageFor(model => model.Landmark, "", new { @class = "text-danger" })
                                            </div>
                                            <label class="col-lg-2 col-md-2 col-sm-2 col-xs-12 control-label">
                                                Distance (km)
                                                <span class="text-danger"> * </span>
                                            </label>
                                            <div class="col-lg-4 col-md-4 col-sm-4 col-xs-12">
                                                <span class="text-danger" id="CustomErr"> </span> @Html.EditorFor(model => model.Distance, new { htmlAttributes = new { @class = "form-control", @placeholder = "Room/Block No", @maxlength = "5" } })
                                                @Html.ValidationMessageFor(model => model.Distance, "", new { @class = "text-danger" })
                                            </div>
                                        </div>
                                    </div>
                                    <div class="col-md-12 col-lg-12 col-sm-12 col-xs-12">
                                        <div class="form-group">
                                            <label class="col-lg-2 col-md-2 col-sm-2 col-xs-12 control-label">
                                                Pin Code
                                                <span class="text-danger"> * </span>
                                            </label>
                                            <div class="col-lg-4 col-md-4 col-sm-4 col-xs-12">
                                                <span class="text-danger" id="CustomErr"> </span>
                                                @Html.DropDownListFor(m => m.PinCode, (SelectList)ViewBag.PinCodeList, "--Select PinCode--", htmlAttributes: new { @class = "form-control" })
                                                @Html.ValidationMessageFor(model => model.PinCode, "", new { @class = "text-danger" })
                                            </div>
                                            <label class="col-lg-2 col-md-2 col-sm-2 col-xs-12 control-label">
                                                State
                                                <span class="text-danger">  </span>
                                            </label>
                                            <div class="col-lg-4 col-md-4 col-sm-4 col-xs-12">
                                                <span class="text-danger" id="CustomErr"> </span>
                                                @Html.HiddenFor(m => m.StateID)
                                                @Html.Editor("state", new { htmlAttributes = new { @class = "form-control", @placeholder = "State", @readonly = "readonly" } })
                                                @Html.ValidationMessageFor(model => model.StateID, "", new { @class = "text-danger" })
                                            </div>
                                        </div>
                                    </div>
                                    <div class="col-md-12 col-lg-12 col-sm-12 col-xs-12">
                                        <div class="form-group">
                                            <label class="col-lg-2 col-md-2 col-sm-2 col-xs-12 control-label">
                                                City
                                                <span class="text-danger">  </span>
                                            </label>
                                            <div class="col-lg-4 col-md-4 col-sm-4 col-xs-12">
                                                <span class="text-danger" id="CustomErr"> </span>
                                                @Html.HiddenFor(m => m.CityID)
                                                @Html.Editor("city", new { htmlAttributes = new { @class = "form-control", @placeholder = "City", @readonly = "readonly" } })
                                                @Html.ValidationMessageFor(model => model.CityID, "", new { @class = "text-danger" })
                                            </div>
                                            <label class="col-lg-2 col-md-2 col-sm-2 col-xs-12 control-label">
                                                Area
                                                <span class="text-danger"> </span>
                                            </label>
                                            <div class="col-lg-4 col-md-4 col-sm-4 col-xs-12">
                                                <span class="text-danger" id="CustomErr"> </span>
                                                @Html.HiddenFor(m => m.Area)
                                                @Html.Editor("area", new { htmlAttributes = new { @class = "form-control", @placeholder = "Area", @readonly = "readonly" } })
                                                @Html.ValidationMessageFor(model => model.Area, "", new { @class = "text-danger" })
                                            </div>
                                        </div>
                                    </div>
                                    <div class="col-md-12 col-lg-12 col-sm-12 col-xs-12">
                                            <div class="form-group">
                                                <label class="col-lg-2 col-md-2 col-sm-2 col-xs-12 control-label">
                                                    Zone
                                                    <span class="text-danger">  </span>
                                                </label>
                                                <div class="col-lg-4 col-md-4 col-sm-4 col-xs-12">
                                                    <span class="text-danger" id="CustomErr"> </span>
                                                    @Html.HiddenFor(m => m.ZoneID)
                                                    @Html.Editor("zone", new { htmlAttributes = new { @class = "form-control", @placeholder = "Zone", @readonly = "readonly" } })
                                                    @Html.ValidationMessageFor(model => model.ZoneID, "", new { @class = "text-danger" })
                                                </div>
                                                <label class="col-lg-2 col-md-2 col-sm-2 col-xs-12 control-label">
                                                    Residence<span class="text-danger"> * </span>
                                                </label>
                                                <div class="col-lg-4 col-md-4 col-sm-4 col-xs-12">
                                                    <span class="text-danger" id="CustomErr"> </span>@Html.DropDownListFor(model => model.ResidenceCode,
new List<SelectListItem> {
new SelectListItem { Value = "" , Text = "Select Residence" },
new SelectListItem { Value = "01" , Text = "Owned" },
new SelectListItem { Value = "02" , Text = "Rented" }
},
new { @class = "form-control" })
                                                    @Html.ValidationMessageFor(model => model.ResidenceCode, "", new { @class = "text-danger" })
                                                </div>
                                            </div>
                                    </div>
                                    <hr style="border: 1px solid #DDD;margin-bottom: 20px;">
                                    <div class="col-md-12 col-lg-12 col-sm-12 col-xs-12">
                                        <div class="form-group">
                                            <label class="col-lg-2 col-md-2 col-sm-3 col-xs-12 control-label">
                                                Residing at this address - Years
                                                <span class="text-danger"> * </span>
                                            </label>
                                            <div class="col-lg-4 col-md-4 col-sm-3 col-xs-12">
                                                @Html.EditorFor(model => model.ResidingAtThisAddress_Years,
                                               new { htmlAttributes = new { @class = "form-control", @placeholder = "Years", @type = "number",@min="0" } })
                                                @Html.ValidationMessageFor(model => model.ResidingAtThisAddress_Years, "", new { @class = "text-danger" })
                                            </div>
                                            <label class="col-lg-2 col-md-2 col-sm-3 col-xs-12 control-label">
                                                Residing at this address - Months
                                                <span class="text-danger">*</span>
                                            </label>
                                            <div class="col-lg-4 col-md-4 col-sm-4 col-xs-12">
                                                <span class="text-danger" id="CustomErr"> </span>
                                                @Html.EditorFor(model => model.ResidingAtThisAddress_Months, new { htmlAttributes = new { @class = "form-control", @placeholder = "Months", @type = "number", @min = "0", } })
                                                @Html.ValidationMessageFor(model => model.ResidingAtThisAddress_Months, "", new { @class = "text-danger" })
                                            </div>
                                        </div>
                                    </div>
                                    <div class="col-md-12 col-lg-12 col-sm-12 col-xs-12">
                                        <div class="form-group">
                                            <label class="col-lg-2 col-md-2 col-sm-3 col-xs-12 control-label">Employee Name <span class="text-danger"> * </span></label>
                                            <div class="col-lg-4 col-md-4 col-sm-3 col-xs-12">
                                                @Html.DropDownListFor(m => m.UserId, (SelectList)ViewBag.RMList, "--Select RM--", htmlAttributes: new { @class = "form-control" })
                                                @Html.ValidationMessageFor(model => model.UserId, "", new { @class = "text-danger" })
                                            </div>
                                            <label class="col-lg-2 col-md-2 col-sm-3 col-xs-12 control-label">
                                                Designation
                                                <span class="text-danger">  </span>
                                            </label>
                                            <div class="col-lg-4 col-md-4 col-sm-3 col-xs-12">
                                                @Html.EditorFor(model => model.Designation, new { htmlAttributes = new { @class = "form-control", @placeholder = "Designation",@readonly=true } })
                                                @Html.ValidationMessageFor(model => model.Designation, "", new { @class = "text-danger" })
                                            </div>
                                        </div>
                                    </div>
                                    <div class="col-md-12 col-lg-12 col-sm-12 col-xs-12">
                                        <div class="form-group">
                                            <label class="col-lg-2 col-md-2 col-sm-3 col-xs-12 control-label">Employee Code<span class="text-danger">  </span></label>
                                            <div class="col-lg-4 col-md-4 col-sm-3 col-xs-12">
                                                @Html.EditorFor(model => model.EmployeeCode, new { htmlAttributes = new { @class = "form-control", @placeholder = "EmployeeCode", @readonly = true } })
                                                @Html.ValidationMessageFor(model => model.EmployeeCode, "", new { @class = "text-danger" })
                                            </div>
                                            <label class="col-lg-2 col-md-2 col-sm-3 col-xs-12 control-label">Comments<span class="text-danger"></span></label>
                                            <div class="col-lg-4 col-md-4 col-sm-4 col-xs-12">
                                                @Html.TextAreaFor(model => model.Comments, new { @class = "form-control", @placeholder = "Comments", @cols = "20", @rows = "2" })
                                                @Html.ValidationMessageFor(model => model.Comments, "", new { @class = "text-danger" })
                                            </div>
                                            <label class="col-lg-2 col-md-2 col-sm-3 col-xs-12 control-label">
                                                Document Details
                                                <span class="text-danger"> * </span>
                                            </label>
                                                @*<u> <a href="#" onClick="getDocumentURL()">Click to View / Add Document(s)</a></u>*@
                                                <hr style="border: 1px solid #DDD;margin-bottom: 20px;">
                                                <div class="row">
                                                    <div class="col-md-12">
                                                        <div class="form-group">
                                                            <label class="col-md-2 control-label">Document Type<span class="text-danger"> * </span></label>
                                                            <div class="col-lg-4 col-md-4 col-sm-5 col-xs-12">
                                                                @Html.DropDownListFor(m => m.DocumentUploadVM.DocumentTypeId, (SelectList)ViewBag.DocumentTypeList, "--Select Document Type--", htmlAttributes: new { @class = "form-control" })
                                                                <span class="text-danger small">@Html.ValidationMessageFor(m => m.DocumentUploadVM.DocumentTypeId)</span>
                                                            </div>
                                                            <label class="col-md-2 control-label"> Document Name <span class="text-danger"> * </span></label>
                                                            <div class="col-lg-4 col-md-4 col-sm-5 col-xs-12">
                                                                @Html.DropDownListFor(m => m.DocumentUploadVM.DocumentId, (SelectList)ViewBag.DocumentList, "--Select Document Name --", htmlAttributes: new { @class = "form-control" })
                                                                <span class="text-danger small">@Html.ValidationMessageFor(m => m.DocumentUploadVM.DocumentId)</span>
                                                            </div>
                                                        </div>
                                                    </div>
                                                    <div class="col-md-12">
                                                        <div class="form-group">
                                                            <label class="col-lg-2 col-md-2 col-sm-3 col-xs-12 control-label">Specify Other</label>
                                                            <div class="col-lg-4 col-md-4 col-sm-3 col-xs-12">
                                                                @Html.EditorFor(model => model.DocumentUploadVM.SpecifyOther, new { htmlAttributes = new { @class = "form-control", @placeholder = "Specify Other", @autocomplete = "Off", @maxlength = "100" } })
                                                                <span class="text-danger small">@Html.ValidationMessageFor(m => m.DocumentUploadVM.SpecifyOther)</span>
                                                            </div>
                                                            <label class="col-lg-2 col-md-2 col-sm-3 col-xs-12 control-label">Name on Document</label>
                                                            <div class="col-lg-4 col-md-4 col-sm-3 col-xs-12">
                                                                @Html.EditorFor(model => model.DocumentUploadVM.NameonDocument, new { htmlAttributes = new { @class = "form-control", @placeholder = "Name on Document", @autocomplete = "Off", @maxlength = "100" } })
                                                                <span class="text-danger small">@Html.ValidationMessageFor(m => m.DocumentUploadVM.NameonDocument)</span>
                                                            </div>
                                                        </div>
                                                    </div>
                                                    <div class="col-md-12">
                                                        <div class="form-group">
                                                            <label class="col-lg-2 col-md-2 col-sm-3 col-xs-12 control-label">Expiry Date</label>
                                                            <div class="col-lg-4 col-md-4 col-sm-3 col-xs-12">
                                                                @Html.EditorFor(model => model.DocumentUploadVM.ExpiryDate, new { htmlAttributes = new { @class = "form-control", @placeholder = "Expiry Date", @autocomplete = "Off" } })
                                                                <span class="text-danger small">@Html.ValidationMessageFor(m => m.DocumentUploadVM.ExpiryDate)</span>
                                                            </div>
                                                            <label class="col-lg-2 col-md-2 col-sm-3 col-xs-12 control-label">Upload Document<span class="text-danger"> * </span></label>
                                                            <div class="col-lg-2 col-md-2 col-sm-3 col-xs-12">
                                                                <input type="file" id="UploadedFile" name="UploadedFile" accept=".png,.jpg,.jpeg,.gif,.pdf" />
                                                            </div>
                                                            <div class="col-md-2">
                                                                <input type="button" style="margin-left: 100px;" value="Add" class="btn btn-sm btn-primary" id="btnAddDocumentDetails" />
                                                            </div>
                                                        </div>
                                                    </div>
                                                </div>
                                                <div class="panel-body panel-no-padding">
                                                    <div id="divDocumentDetails">
                                                        <table cellpadding="0" style="width:100%" cellspacing="0" border="0" class="table table-striped table-bordered table-hover table-fixed-header m0" id="tblDocumentDetails">
                                                            <thead>
                                                                <tr>
                                                                    <th class="col-sm-2" style="width:2%">Sr. No.</th>
                                                                    <th style="text-align:left">Document Type</th>
                                                                    <th style="text-align:left">Document Name</th>
                                                                    <th style="text-align:left">Specify Other</th>
                                                                    <th style="text-align:left">Name on Document</th>
                                                                    <th style="text-align:left">Expiry Date</th>
                                                                    <th style="text-align:left">Upload File</th>
                                                                    <th class="text-center" style="width:8%">Actions</th>
                                                                </tr>
                                                            </thead>
                                                            <tbody>
                                                                @{int j = 1;}
                                                                @foreach (var item in Model.DocumentUploadList)
                                                                {
                                                                    <tr id="@item.ID">
                                                                        <td>@j</td>
                                                                        <td id="@item.DocumentTypeId">@item.DocumentTypeName</td>
                                                                        <td id="@item.DocumentId">@item.DocumentName</td>
                                                                        <td>@item.SpecifyOther</td>
                                                                        <td>@item.NameonDocument</td>
                                                                        <td>@item.ExpiryDate</td>
                                                                        <td>@item.FileName</td>
                                                                        <td>
                                                                            <a class="delete"><i class="fa fa-trash"></i></a>
                                                                        </td>
                                                                    </tr>
                                                                    j++;
                                                                }
                                                            </tbody>
                                                        </table>
                                                    </div>
                                                </div>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </section>
}

@section javascriptsection{
    @Scripts.Render("~/bundles/jquerydataTablesJS")
    <script src="https://cdnjs.cloudflare.com/ajax/libs/jquery-timepicker/1.8.1/jquery.timepicker.min.js"></script>
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/jquery-timepicker/1.8.1/jquery.timepicker.min.css" type="text/css" />
    <script type="text/javascript">

        function StartValidation() {

            var len = $("#tblDocumentDetails tbody").length;
            if (len == 0) {
                alert("Please Add Document Details");
                return false;
            }
        }

        $(document).ready(function () {
            $('input[type=datetime]').datepicker({
                dateFormat: "dd/mm/yy",
                changeMonth: true,
                changeYear: true,
                yearRange: "-60:+0"
            });
            $('#TimeofVisit').timepicker(
                {
                    template: 'dropdown',
                    minuteStep: 1,
                    secondStep: 1,
                    showMeridian: true
                });
            $("#PinCode").on('change', function () {
                var pin = $(this).val();
                FillAddressByPinCode(pin);
            });
            $("#UserId").on('change', function () {
                var user = $(this).val();
                FillEmployeeDetailsById(user);
            });
        });


        $("#tblDocumentDetails TBODY TR").on("click", ".delete", function () {
            if (confirm('Are you sure to remove?')) {
                var tr = $(this).closest('tr');
                trid = tr.find('td:eq(0)').html();
                tr.remove();
                $.ajax({
                    url: '/ResidenceVerification/Remove?id=' + trid,
                    type: "POST",
                    contentType: "application/json; charset=utf-8",
                    dataType: "json",
                    success: function (result) {
                        //$(this).parents('tr').remove();
                    },
                    error: function (err) {
                        alert(err.statusText);
                    }
                });
            }
        })

        var sr_no = 0;
        var trid = 0;
        currentRow = null;

        $("#btnAddDocumentDetails").click(function () {
            $("#CustomErrr").text("");
            $('[data-toggle="tooltip"]').tooltip();
            //var actions = "<a class=\"edit\"><i class=\"fa fa-edit\" title='Edit'></i></a>&nbsp;&nbsp;&nbsp;&nbsp;<a class=\"delete\"><i class=\"fa fa-trash\" title='Delete'></i></a>"
            var actions = "<a class=\"delete\"><i class=\"fa fa-trash\" title='Delete'></i></a>"
            var index = $("#tblDocumentDetails tbody tr:last").index();
            debugger;
            var srno = 0;
            var newtrno = trid;
            if (sr_no == 0) {
                srno = index + 2;
                newtrno = 0;
            }
            else {
                srno = sr_no;
            }
            sr_no = 0;
            trid = 0;

            var DocumentTypeId = $("#DocumentUploadVM_DocumentTypeId").val();
            var DocumentTypeName = $("#DocumentUploadVM_DocumentTypeId option:selected").text();
            var DocumentId = $("#DocumentUploadVM_DocumentId").val();
            var DocumentName = $("#DocumentUploadVM_DocumentId option:selected").text();
            var ExpiryDate = $("#DocumentUploadVM_ExpiryDate").val();
            //var filename=$("#UploadedFile").val();
            var filename = $("#targetImg").val();
            var SpecifyOther = $("#DocumentUploadVM_SpecifyOther").val();
            var NameonDocument = $("#DocumentUploadVM_NameonDocument").val();
            debugger;

            var isExist = false;
            $("#tblDocumentDetails TBODY tr").each(function () {
                // get row
                debugger;
                var row = $(this);
                // get first and second td
                var first = row.find('td:nth-child(2)').attr('id');
                var second = row.find('td:nth-child(3)').attr('id');
                // if exists, remove the tr
                if (first == DocumentTypeId && second == DocumentId) {
                    isExist = true;
                }
            });
            if (isExist) {
                alert("The same Document Type and Document Name already Exist");
                return false;
            }
            else {
                if (currentRow) {
                    $("#tblDocumentDetails tbody").find($(currentRow)).replaceWith(row);
                    $("#DocumentUploadVM_DocumentTypeId").val("");
                    $("#DocumentUploadVM_DocumentId").val("");
                    $("#DocumentUploadVM_SpecifyOther").val("");
                    $("#DocumentUploadVM_NameonDocument").val("");
                    $("#DocumentUploadVM_ExpiryDate").val("");
                    $("#UploadedFile").val("");
                    currentRow = null;
                }
                else {
                    if (DocumentTypeId != "" && DocumentId != "") {

                        var fileUpload = $("#UploadedFile").get(0);
                        var files = fileUpload.files;
                        // Create FormData object
                        fileData = new FormData();
                        // Looping over all files and add it to FormData object
                        for (var i = 0; i < files.length; i++) {
                            fileData.append("UploadedFile", files[i]);
                        }
                        var row = '<tr id=' + newtrno + '>' +
                      '<td width="10%">' + srno + '</td>' +
                      '<td width="10%" id="' + DocumentTypeId + '">' + DocumentTypeName + '</td>' +
                      '<td width="10%" id="' + DocumentId + '">' + DocumentName + '</td>' +
                      '<td width="20%">' + SpecifyOther + '</td>' +
                      '<td width="20%">' + NameonDocument + '</td>' +
                      '<td width="20%">' + ExpiryDate + '</td>' +
                      '<td width="20%"><a href="#">' + files[0].name + '</a></td>"' +
                      '<td id=' + srno + '' + actions + '</td>' +
                      '</tr>';
                        $("#tblDocumentDetails tbody").append(row);

                        // Adding one more key to FormData object
                        fileData.append('Id', srno);
                        fileData.append('DocumentTypeId', DocumentTypeId);
                        fileData.append('DocumentId', DocumentId);
                        fileData.append('ExpiryDate', ExpiryDate);
                        fileData.append('SpecifyOther', SpecifyOther);
                        fileData.append('NameonDocument', NameonDocument);
                        $.ajax({
                            url: '/ResidenceVerification/AddDocument',
                            type: "POST",
                            contentType: false, // Not to set any content header
                            processData: false, // Not to process data
                            data: fileData,
                            success: function (result) {
                            },
                            error: function (err) {
                                //alert(err.statusText);
                            }
                        });

                        $("#DocumentUploadVM_DocumentTypeId").val("");
                        $("#DocumentUploadVM_DocumentId").val("");
                        $("#DocumentUploadVM_ExpiryDate").val("");
                        $("#UploadedFile").val("");
                        $("#DocumentUploadVM_SpecifyOther").val("");
                        $("#DocumentUploadVM_NameonDocument").val("");
                        $("#divDocumentDetails").show();
                    }
                }
            }

            $("#tblDocumentDetails TBODY TR").on("click", ".delete", function () {
                if (confirm('Are you sure to remove?')) {
                    var tr = $(this).closest('tr');
                    trid = tr.find('td:eq(0)').html();
                    tr.remove();
                    $.ajax({
                        url: '/ResidenceVerification/Remove?id=' + trid,
                        type: "POST",
                        contentType: "application/json; charset=utf-8",
                        dataType: "json",
                        success: function (result) {
                            //$(this).parents('tr').remove();
                        },
                        error: function (err) {
                            alert(err.statusText);
                        }
                    });
                }
            })
        })

        $("#DocumentUploadVM_DocumentTypeId").change(function () {
            $("#DocumentUploadVM_DocumentId").empty();
            $.ajax({
                type: 'POST',
                url: '@Url.Action("GetDcoument","DocumentUpload")', // we are calling json method
                dataType: 'json',
                data: { id: $("#DocumentUploadVM_DocumentTypeId").val() },
                // here we are get value of selected country and passing same value
                //as inputto json method GetStates.
                success: function (data) {
                    var doc = "<select id='DocumentUploadVM_DocumentId'>";
                    doc = doc + '<option value="">--Select Document--</option>';
                    for (var i = 0; i < data.length; i++) {
                        doc = doc + '<option value=' + data[i].Value + '>' + data[i].Text + '</option>';
                    }
                    doc = doc + '</select>';
                    $('#DocumentUploadVM_DocumentId').html(doc);
                    $("#DocumentUploadVM_DocumentId").removeAttr('disabled')
                },
                error: function (ex) {
                    alert('Failed to retrieve data.' + ex);
                }
            });
            return false;
        })

        $("#DocumentUploadVM_DocumentId").change(function () {
            $.ajax({
                type: 'POST',
                url: '@Url.Action("GetExpiryDate","DocumentUpload")', // we are calling json method
                dataType: 'json',
                data: { id: $("#DocumentUploadVM_DocumentId").val() },
                // here we are get value of selected country and passing same value
                //as inputto json method GetStates.
                success: function (data) {
                    debugger;
                    $("#DocumentUploadVM_ExpiryDate").attr('disabled', 'disabled')
                    if (data == true) {
                        $("#DocumentUploadVM_ExpiryDate").removeAttr('disabled')
                    }
                },
                error: function (ex) {
                    alert('Failed to retrieve data.' + ex);
                }
            });
            return false;
        })


        function FillEmployeeDetailsById(id) {
            $.ajax({
                type: "POST",
                url: '@Url.Action("FillEmployeeDetailsById", "ResidenceVerification")',
                data: '{id: "' + id + '"}',
                contentType: "application/json; charset=utf-8",
                dataType: "json",
                success: function (result) {
                    $("#Designation").val(result.UserName);
                    $("#EmployeeCode").val(result.EmployeeCode);
                },
                error: function (xhr, status, error) {
                    alert("something went wrong!");
                }
            });
        }
        function FillAddressByPinCode(pin) {
            $.ajax({
                type: "POST",
                url: '@Url.Action("FillAddressByPinCode", "KYC")',
                data: '{id: "' + pin + '"}',
                contentType: "application/json; charset=utf-8",
                dataType: "json",
                success: function (result) {
                    $("#city").val(result.CityName);
                    $("#state").val(result.StateName);
                    $("#area").val(result.AreaName);
                    $("#zone").val(result.ZoneName);
                    $("#StateID").val(result.StateID);
                    $("#CityID").val(result.CityId);
                    $("#Area").val(result.AreaName);
                    $("#ZoneID").val(result.ZoneID);

                },
                error: function (xhr, status, error) {
                    alert("something went wrong!");
                }
            });
        }

        function getDocumentURL() {
            var kycid = $("#kycid").val();
            $.ajax({
                type: "POST",
                url: '@Url.Action("GetDocumentID", "ResidenceVerification")',
                data: '{id: "' + kycid + '"}',
                contentType: "application/json; charset=utf-8",
                dataType: "json",
                success: function (result) {
                    if (result != 0) {
                        window.open("/DocumentUpload/GetDocUploadDetailsById?ID=" + result + "", '_blank');
                    }
                    else {
                        window.open("/DocumentUpload/GetCustomerById?KycId=" + kycid + "", '_blank');
                    }

                },
                error: function (xhr, status, error) {
                    alert("Please select customer!");
                }
            });
        }

        function ShowClientTableList() {
            $('#divviewfilldata').empty();
            $.ajax({
                type: "POST",
                url: '@Url.Action("GetCustomerDetails", "ResidenceVerification")',
                success: function (data) {
                    $('#diveditfilldata').empty();
                    $('#diveditfilldata').html(data);
                    $('#CustomerDetailsTable').dataTable();
                },
                error: function (xhr, status, error) {
                    alert(error);
                }
            });
        }

        var urlRedirect = '@Html.Raw(@Url.Action("Index", "ResidenceVerification"))';

        function OnSuccess(response) {

            bootbox.alert('Record saved successfully')

            $(document).click(function () {
                window.location.href = urlRedirect;
            });
        }

        function OnFailure(response) {
            alert('Please fill presanction details for this customer!');
        }

    </script>
}